// Generated by purs bundle 0.13.0
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  exports["flip"] = flip;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function(exports) {
  'use strict';

  exports.getBrickUncurried = function(encoder_ports, motor_ports, sensor_ports) {
      var newbrick = {};
      newbrick.accelerometer = brick.accelerometer();
      newbrick.battery = brick.battery();
      newbrick.colorSensor = {};
      newbrick.display = brick.display();
      newbrick.gyroscope = brick.gyroscope();
      newbrick.keys = brick.keys();
      newbrick.led = brick.led();
      newbrick.encoders = [];
      for (var i = 0; i < encoder_ports.length; ++i) {
          newbrick.encoders[i] = brick.encoder("E" + encoder_ports[i].value0);
      }
      newbrick.motors = [];
      for (var i = 0; i < motor_ports.length; ++i) {
          newbrick.motors[i] = brick.motor("M" + motor_ports[i].value0);
      }
      newbrick.sensors = [];
      for (var i = 0; i < sensor_ports.length; ++i) {
          if (sensor_ports[i].constructor.name === "AnalogPort")
              newbrick.sensors[i] = brick.sensor("A" + sensor_ports[i].value0);
          else
              newbrick.sensors[i] = brick.sensor("D" + sensor_ports[i].value0);
      }
      newbrick.orig = brick;
      return newbrick;
  }
})(PS["Trik.Brick"] = PS["Trik.Brick"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Trik.Brick"] = $PS["Trik.Brick"] || {};
  var exports = $PS["Trik.Brick"];
  var $foreign = $PS["Trik.Brick"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];               
  var getBrick = Data_Function_Uncurried.runFn3($foreign.getBrickUncurried);
  exports["getBrick"] = getBrick;
})(PS);
(function(exports) {
  'use strict';

  exports.setMotorPowerUncurried = function(motor, power) {
      motor.setPower(power);
  }
})(PS["Trik.Brick.Motor"] = PS["Trik.Brick.Motor"] || {});
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Trik.Brick.Motor"] = $PS["Trik.Brick.Motor"] || {};
  var exports = $PS["Trik.Brick.Motor"];
  var $foreign = $PS["Trik.Brick.Motor"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var setMotorPower = Data_Function_Uncurried.runFn2($foreign.setMotorPowerUncurried);
  exports["setMotorPower"] = setMotorPower;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Trik.Brick.Ports"] = $PS["Trik.Brick.Ports"] || {};
  var exports = $PS["Trik.Brick.Ports"];
  var MotorPort = (function () {
      function MotorPort(value0) {
          this.value0 = value0;
      };
      MotorPort.create = function (value0) {
          return new MotorPort(value0);
      };
      return MotorPort;
  })();
  var EncoderPort = (function () {
      function EncoderPort(value0) {
          this.value0 = value0;
      };
      EncoderPort.create = function (value0) {
          return new EncoderPort(value0);
      };
      return EncoderPort;
  })();
  exports["MotorPort"] = MotorPort;
  exports["EncoderPort"] = EncoderPort;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Trik_Brick = $PS["Trik.Brick"];
  var Trik_Brick_Motor = $PS["Trik.Brick.Motor"];
  var Trik_Brick_Ports = $PS["Trik.Brick.Ports"];                
  var solution = function (n) {
      var brick = Trik_Brick.getBrick([ new Trik_Brick_Ports.EncoderPort(1), new Trik_Brick_Ports.EncoderPort(2) ])([ new Trik_Brick_Ports.MotorPort(1), new Trik_Brick_Ports.MotorPort(2) ])([  ]);
      return Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Trik_Brick_Motor.setMotorPower)(90))(brick.motors);
  };
  var main = solution;
  exports["solution"] = solution;
  exports["main"] = main;
})(PS);
PS["Main"].main();