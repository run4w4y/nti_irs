// Generated by Haxe 4.0.5
(function (console, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) {
			pos = 0;
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
var Type = function() { };
Type.__name__ = true;
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var angle_Angle = function(value) {
	this.value = (360 + value) % 360;
};
angle_Angle.__name__ = true;
angle_Angle.prototype = {
	add: function(angle1) {
		return new angle_Angle(this.value + angle1);
	}
	,getDelta: function(angle1) {
		return (this.value - angle1.value + 900) % 360 - 180;
	}
	,toString: function() {
		return "Angle(" + this.value + ")";
	}
	,__class__: angle_Angle
};
var app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$ = {};
app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.__name__ = true;
app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$._new = function(artag) {
	var this1 = artag;
	return this1;
};
app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.binaryToInt = function(this1,str) {
	var res = 0;
	var cur = 1;
	var _g = 0;
	var _g1 = ds__$Range_Range_$Impl_$._new(str.length - 1,-1);
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		res += Std.parseInt(str.charAt(i)) * cur;
		cur *= 2;
	}
	return res;
};
app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.colorToDigit = function(this1,color) {
	if(color.value) {
		return 1;
	} else {
		return 0;
	}
};
app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.read = function(this1) {
	return app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.binaryToInt(this1,Std.string(app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.colorToDigit(this1,this1.marker[1][2])) + Std.string(app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.colorToDigit(this1,this1.marker[2][1])) + Std.string(app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.colorToDigit(this1,this1.marker[2][3])) + Std.string(app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.colorToDigit(this1,this1.marker[3][2])));
};
var app_main_Main = function() { };
app_main_Main.__name__ = true;
app_main_Main.main = function() {
	var model = new app_model_FinalModel({ leftMotor : trik_Brick.motor("M4"), rightMotor : trik_Brick.motor("M3"), leftEncoder : trik_Brick.encoder("E4"), rightEncoder : trik_Brick.encoder("E3"), frontSensor : trik_Brick.sensor("A1"), leftSensor : trik_Brick.sensor("A3"), rightSensor : trik_Brick.sensor("A2"), environment : robotModel_Environment.Simulator, wheelRadius : 2.8, cellSize : 700});
	model.solution();
};
var robotModel_RobotModel = function(args) {
	this.currentDirection = new angle_Angle(0);
	this.leftMotor = args.leftMotor;
	this.rightMotor = args.rightMotor;
	this.leftEncoder = args.leftEncoder;
	this.rightEncoder = args.rightEncoder;
	this.cameraPort = tools_NullTools.coalesce(args.cameraPort,"video1");
	this.environment = args.environment;
	this.wheelRadius = args.wheelRadius;
};
robotModel_RobotModel.__name__ = true;
robotModel_RobotModel.prototype = {
	stop: function(delayTime) {
		delayTime = tools_NullTools.coalesce(delayTime,time_Time.Milliseconds(0));
		this.leftMotor.setPower(0);
		this.rightMotor.setPower(0);
		trik_Script.wait(delayTime);
	}
	,resetEncoders: function() {
		this.leftEncoder.reset();
		this.rightEncoder.reset();
	}
	,calibrateGyro: function(duration) {
		duration = tools_NullTools.coalesce(duration,time_Time.Seconds(10));
		trik_robot_gyroscope__$GyroscopeHigher_GyroscopeHigher_$Impl_$.calibrate(trik_Brick.gyroscope,duration);
	}
	,readGyro: function() {
		return new angle_Angle(360 - trik_Brick.gyroscope.read()[6] / 1000);
	}
	,move: function(speed,setpoint,readF,getError,koefficients,condition,interval) {
		if(speed == null) {
			speed = 100;
		}
		interval = tools_NullTools.coalesce(interval,time_Time.Seconds(0.1));
		this.resetEncoders();
		var pid1 = new pid_PID(interval,-100,100,koefficients);
		while(true) {
			var u = pid1.calculate(getError(readF(),setpoint));
			this.leftMotor.setPower(Math.round(speed + u));
			this.rightMotor.setPower(Math.round(speed - u));
			if(condition == null) {
				return;
			}
			trik_Script.wait(interval);
			if(!condition()) {
				break;
			}
		}
		this.stop(time_Time.Seconds(0.1));
	}
	,moveGyro: function(speed,condition,interval,coefficients) {
		if(speed == null) {
			speed = 100;
		}
		var defaults = { kp : 1.05, kd : 0.4, ki : 0.0001};
		this.move(speed,this.currentDirection,$bind(this,this.readGyro),function(value,setpoint) {
			return value.getDelta(setpoint);
		},coefficients == null ? defaults : coefficients,condition,interval);
	}
	,turnSimulator: function(angle) {
		var _gthis = this;
		this.currentDirection = this.currentDirection.add(angle);
		this.moveGyro(0,function() {
			return Math.abs(_gthis.currentDirection.getDelta(_gthis.readGyro())) > 1;
		},time_Time.Seconds(0.01),{ kp : 1});
		this.stop(time_Time.Seconds(0.1));
	}
	,turn: function(angle) {
		this.resetEncoders();
		if(this.environment._hx_index == 1) {
			this.turnSimulator(angle);
		} else {
			return;
		}
	}
	,__class__: robotModel_RobotModel
};
var app_model_FinalModel = function(args) {
	this.frontDist = 25;
	robotModel_RobotModel.call(this,args);
	this.frontSensor = args.frontSensor;
	this.leftSensor = args.leftSensor;
	this.rightSensor = args.rightSensor;
	this.cellSize = args.cellSize;
};
app_model_FinalModel.__name__ = true;
app_model_FinalModel.__super__ = robotModel_RobotModel;
app_model_FinalModel.prototype = $extend(robotModel_RobotModel.prototype,{
	stringToImage: function(str) {
		var w = 160;
		var h = 120;
		var contents = StringTools.trim(str).split(" ");
		var res = [];
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var i = _g++;
			var tmp = [];
			var _g2 = 0;
			var _g11 = w;
			while(_g2 < _g11) {
				var j = _g2++;
				var curIndex = w * i + j;
				if(contents[curIndex] != null) {
					tmp.push(tools_ColorTools.toRGB(new color_HexColor(contents[curIndex])));
				}
			}
			res.push(tmp);
		}
		return image__$Image_Image_$Impl_$._new(res);
	}
	,getDestination: function() {
		var lines = trik_Script.readAll("input.txt");
		var first = app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.read(app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$._new(new artag_Artag(this.stringToImage(lines[0]))));
		var second = app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$.read(app_artagDecoder__$ArtagDecoder_ArtagDecoder_$Impl_$._new(new artag_Artag(this.stringToImage(lines[1]))));
		if(first < 8) {
			return { x : first, y : second - 8};
		} else {
			return { x : second, y : first - 8};
		}
	}
	,checkLeft: function() {
		return this.leftSensor.read() <= 70;
	}
	,checkRight: function() {
		return this.rightSensor.read() <= 70;
	}
	,checkFront: function() {
		return this.frontSensor.read() <= 70;
	}
	,align: function() {
		var readVal = this.frontSensor.read();
		var threshold = 25;
		var delta = readVal - this.frontDist;
		while(Math.abs(delta) <= threshold && Math.abs(delta) != 0) {
			readVal = this.frontSensor.read();
			delta = readVal - this.frontDist;
			var pid1 = new pid_PID(time_Time.Seconds(0.1),-100,100,{ kp : 10, kd : 0, ki : 0});
			var u = pid1.calculate(delta);
			this.moveGyro(Math.round(u));
			trik_Script.wait(time_Time.Seconds(0.1));
		}
		this.stop(time_Time.Seconds(0.1));
	}
	,goEnc: function(encValue) {
		var _gthis = this;
		var startTime = trik_Script.time();
		this.moveGyro(90,function() {
			if((_gthis.leftEncoder.read() + _gthis.rightEncoder.read()) / 2 <= encValue) {
				return tools_TimeTools.getDifference(trik_Script.time(),startTime) < 3000;
			} else {
				return false;
			}
		});
		this.stop(time_Time.Seconds(0.1));
	}
	,solution: function() {
		var _gthis = this;
		this.goEnc(150);
		var cellEnc = Math.round(this.cellSize / (this.wheelRadius * 2 * Math.PI) * 360 / 10.45);
		var dest = this.getDestination();
		trik_Script.print("" + dest.x + " " + dest.y);
		var executor = new movementExecutor_MovementExecutor(function(val) {
			_gthis.turn(val);
			_gthis.align();
		},function() {
			_gthis.goEnc(cellEnc);
			_gthis.align();
		});
		var lab = new graph_Labyrinth(8,8);
		var startNode = lab.localizeUndefined(graph_Direction.Right,executor,$bind(this,this.checkLeft),$bind(this,this.checkRight),$bind(this,this.checkFront));
		var _g = 0;
		var _g1 = lab.getPath(startNode,new graph_Node(dest.y,dest.x));
		while(_g < _g1.length) {
			var move = _g1[_g];
			++_g;
			executor.add(move);
		}
		executor.execute();
		trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.addLabel(trik_Brick.display,"finish",image__$Pixel_Pixel_$Impl_$._new(0,0));
	}
	,__class__: app_model_FinalModel
});
var artag_Artag = function(image1,checkFlag,markerSize) {
	if(markerSize == null) {
		markerSize = 5;
	}
	if(checkFlag == null) {
		checkFlag = true;
	}
	var _gthis = this;
	this.markerSize = markerSize;
	this.image = this.filter(image1);
	this.corners = tools_ImageTools.findCorners(this.image);
	var _this = this.getCells();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var a = _this[i];
		var f = $bind(_gthis,_gthis.getCellColor);
		var result1 = new Array(a.length);
		var _g2 = 0;
		var _g11 = a.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			result1[i1] = f(a[i1]);
		}
		result[i] = result1;
	}
	this.marker = image__$Image_Image_$Impl_$._new(result);
	this.rotateMarker();
	if(checkFlag && !this.checkMarker()) {
		throw new js__$Boot_HaxeError(new artag_exceptions_ArtagException("Could not read marker properly"));
	}
};
artag_Artag.__name__ = true;
artag_Artag.prototype = {
	invY: function(p) {
		return science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(p),-science_geometry__$Point_Point_$Impl_$.get_y(p));
	}
	,filter: function(image) {
		return tools_ImageTools.erode(tools_ImageTools.toBinary(image,20));
	}
	,getCells: function() {
		var res = [];
		this.leftLine = new science_geometry_Line(this.invY(this.corners.leftTop),this.invY(this.corners.leftBottom));
		this.rightLine = new science_geometry_Line(this.invY(this.corners.rightTop),this.invY(this.corners.rightBottom));
		this.topLine = new science_geometry_Line(this.invY(this.corners.leftTop),this.invY(this.corners.rightTop));
		this.bottomLine = new science_geometry_Line(this.invY(this.corners.leftBottom),this.invY(this.corners.rightBottom));
		var leftDist = tools_GeometryTools.distTo(this.corners.leftBottom,this.corners.leftTop);
		var rightDist = tools_GeometryTools.distTo(this.corners.rightBottom,this.corners.rightTop);
		var topDist = tools_GeometryTools.distTo(this.corners.leftTop,this.corners.rightTop);
		var bottomDist = tools_GeometryTools.distTo(this.corners.leftBottom,this.corners.rightBottom);
		this.verticalLines = [];
		this.horizontalLines = [];
		var _g = 0;
		var _g1 = this.markerSize + 1;
		while(_g < _g1) {
			var i = _g++;
			this.verticalLines.push(new science_geometry_Line(this.topLine.getPointX(science_geometry__$Point_Point_$Impl_$.get_x(this.corners.leftTop) + topDist * i / this.markerSize),this.bottomLine.getPointX(science_geometry__$Point_Point_$Impl_$.get_x(this.corners.leftBottom) + bottomDist * i / this.markerSize)));
			this.horizontalLines.push(new science_geometry_Line(this.invY(this.leftLine.getPointY(science_geometry__$Point_Point_$Impl_$.get_y(this.corners.leftTop) + leftDist * i / this.markerSize)),this.invY(this.rightLine.getPointY(science_geometry__$Point_Point_$Impl_$.get_y(this.corners.rightTop) + rightDist * i / this.markerSize))));
		}
		var _g2 = 0;
		var _g3 = this.markerSize;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var tmp = [];
			var _g21 = 0;
			var _g31 = this.markerSize;
			while(_g21 < _g31) {
				var j = _g21++;
				tmp.push(new image_Corners(science_geometry__$Point_Point_$Impl_$.round(this.invY(tools_GeometryTools.getIntersectionPoint(this.verticalLines[j],this.horizontalLines[i1]))),science_geometry__$Point_Point_$Impl_$.round(this.invY(tools_GeometryTools.getIntersectionPoint(this.verticalLines[j + 1],this.horizontalLines[i1]))),science_geometry__$Point_Point_$Impl_$.round(this.invY(tools_GeometryTools.getIntersectionPoint(this.verticalLines[j + 1],this.horizontalLines[i1 + 1]))),science_geometry__$Point_Point_$Impl_$.round(this.invY(tools_GeometryTools.getIntersectionPoint(this.verticalLines[j],this.horizontalLines[i1 + 1])))));
			}
			res.push(tmp);
		}
		return res;
	}
	,getCellColor: function(cell) {
		var line1 = new science_geometry_Line(this.invY(cell.leftTop),this.invY(cell.rightBottom));
		var line2 = new science_geometry_Line(this.invY(cell.rightTop),this.invY(cell.leftBottom));
		var intersection = science_geometry__$Point_Point_$Impl_$.round(this.invY(tools_GeometryTools.getIntersectionPoint(line1,line2)));
		return this.image[science_geometry__$Point_Point_$Impl_$.get_y(intersection)][science_geometry__$Point_Point_$Impl_$.get_x(intersection)];
	}
	,checkControlBit: function() {
		return !this.marker[this.markerSize - 2][this.markerSize - 2].value;
	}
	,checkMarker: function() {
		var _g = 0;
		var _g1 = this.markerSize;
		while(_g < _g1) {
			var i = _g++;
			if(!this.marker[0][i].value || !this.marker[this.markerSize - 1][i].value || !this.marker[i][0].value || !this.marker[i][this.markerSize - 1].value) {
				return false;
			}
		}
		return this.checkControlBit();
	}
	,rotateMarker: function() {
		var rotateCount = 0;
		while(!this.checkControlBit()) {
			this.marker = science_matrix_MatrixTools.rotateRight(this.marker);
			++rotateCount;
			if(rotateCount >= 4) {
				throw new js__$Boot_HaxeError(new artag_exceptions_ArtagException("Could not find control bit in the given marker"));
			}
		}
	}
	,__class__: artag_Artag
};
var exceptions_BaseException = function(errorMessage) {
	this.errorMessage = errorMessage;
};
exceptions_BaseException.__name__ = true;
exceptions_BaseException.prototype = {
	toString: function() {
		return "BaseException(" + this.errorMessage + ")";
	}
	,__class__: exceptions_BaseException
};
var artag_exceptions_ArtagException = function(errorMessage) {
	exceptions_BaseException.call(this,errorMessage);
};
artag_exceptions_ArtagException.__name__ = true;
artag_exceptions_ArtagException.__super__ = exceptions_BaseException;
artag_exceptions_ArtagException.prototype = $extend(exceptions_BaseException.prototype,{
	toString: function() {
		return "ArtagException(" + this.errorMessage + ")";
	}
	,__class__: artag_exceptions_ArtagException
});
var color_Color = function() { };
color_Color.__name__ = true;
color_Color.__isInterface__ = true;
color_Color.prototype = {
	__class__: color_Color
};
var color_BaseColor = function() {
	this.rgbValue = null;
};
color_BaseColor.__name__ = true;
color_BaseColor.__interfaces__ = [color_Color];
color_BaseColor.prototype = {
	calculateRGB: function() {
	}
	,get_r: function() {
		this.calculateRGB();
		return this.rgbValue.r;
	}
	,get_g: function() {
		this.calculateRGB();
		return this.rgbValue.g;
	}
	,get_b: function() {
		this.calculateRGB();
		return this.rgbValue.b;
	}
	,toString: function() {
		return "BaseColor()";
	}
	,__class__: color_BaseColor
};
var color_BinaryColor = function(value) {
	color_BaseColor.call(this);
	this.value = value;
};
color_BinaryColor.__name__ = true;
color_BinaryColor.__super__ = color_BaseColor;
color_BinaryColor.prototype = $extend(color_BaseColor.prototype,{
	calculateRGB: function() {
		this.rgbValue = tools_NullTools.coalesce(this.rgbValue,this.value ? { r : 255, g : 255, b : 255} : { r : 0, g : 0, b : 0});
	}
	,inverse: function() {
		return new color_BinaryColor(!this.value);
	}
	,toString: function() {
		return "BinaryColor(" + Std.string(this.value) + ")";
	}
	,__class__: color_BinaryColor
});
var color_HSVColor = function(h,s,v) {
	color_BaseColor.call(this);
	constraints_Constraints.checkRange(h,0,360);
	constraints_Constraints.checkRange(s,0,1);
	constraints_Constraints.checkRange(v,0,1);
	this.h = h;
	this.s = s;
	this.v = v;
};
color_HSVColor.__name__ = true;
color_HSVColor.__super__ = color_BaseColor;
color_HSVColor.prototype = $extend(color_BaseColor.prototype,{
	calculateRGB: function() {
		var fH = Math.max(0,Math.min(360,this.h)) / 60;
		var fS = Math.max(0,Math.min(1,this.s));
		var fV = Math.max(0,Math.min(1,this.v));
		var resRgb;
		if(fS == 0) {
			this.rgbValue = tools_NullTools.coalesce(this.rgbValue,{ r : Math.round(this.v * 255), g : Math.round(this.v * 255), b : Math.round(this.v * 255)});
			return;
		}
		var i = Math.floor(this.h);
		var f = this.h - i;
		var p = this.v * (1 - this.s);
		var q = this.v * (1 - this.s * f);
		var t = this.v * (1 - this.s * (1 - f));
		var res;
		switch(i) {
		case 0:
			res = [this.v,t,p];
			break;
		case 1:
			res = [q,this.v,p];
			break;
		case 2:
			res = [p,this.v,t];
			break;
		case 3:
			res = [p,q,this.v];
			break;
		case 4:
			res = [t,p,this.v];
			break;
		default:
			res = [this.v,p,q];
		}
		this.rgbValue = tools_NullTools.coalesce(this.rgbValue,{ r : Math.round(res[0] * 255), g : Math.round(res[1] * 255), b : Math.round(res[2] * 255)});
	}
	,toString: function() {
		return "HSVColor(" + this.h + ", " + this.s + ", " + this.v + ")";
	}
	,__class__: color_HSVColor
});
var color_HexColor = function(hex) {
	color_BaseColor.call(this);
	if(hex.length != 6) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("hex string must be of length 6"));
	}
	this.value = hex;
};
color_HexColor.__name__ = true;
color_HexColor.__super__ = color_BaseColor;
color_HexColor.prototype = $extend(color_BaseColor.prototype,{
	hexToInt: function(str) {
		return Std.parseInt("0x" + str);
	}
	,calculateRGB: function() {
		this.rgbValue = tools_NullTools.coalesce(this.rgbValue,{ r : this.hexToInt(HxOverrides.substr(this.value,0,2)), g : this.hexToInt(HxOverrides.substr(this.value,2,2)), b : this.hexToInt(HxOverrides.substr(this.value,4,2))});
	}
	,toString: function() {
		return "HexColor(" + this.value + ")";
	}
	,__class__: color_HexColor
});
var color_RGBColor = function(r,g,b) {
	var i = r;
	constraints_Constraints.checkRange(i,0,255);
	var i1 = g;
	constraints_Constraints.checkRange(i1,0,255);
	var i2 = b;
	constraints_Constraints.checkRange(i2,0,255);
	this.r = r;
	this.g = g;
	this.b = b;
};
color_RGBColor.__name__ = true;
color_RGBColor.__interfaces__ = [color_Color];
color_RGBColor.prototype = {
	get_r: function() {
		return this.r;
	}
	,get_g: function() {
		return this.g;
	}
	,get_b: function() {
		return this.b;
	}
	,toString: function() {
		return "RGBColor(" + this.get_r() + ", " + this.get_g() + ", " + this.get_b() + ")";
	}
	,__class__: color_RGBColor
};
var color_LiteralColor = function(r,g,b,name) {
	color_RGBColor.call(this,r,g,b);
	this.name = name;
};
color_LiteralColor.__name__ = true;
color_LiteralColor.__super__ = color_RGBColor;
color_LiteralColor.prototype = $extend(color_RGBColor.prototype,{
	toString: function() {
		return "LiteralColor(" + this.name + ")";
	}
	,__class__: color_LiteralColor
});
var constraints_Constraints = function() { };
constraints_Constraints.__name__ = true;
constraints_Constraints.checkRange = function(number,left,right,errorMessage) {
	errorMessage = tools_NullTools.coalesce(errorMessage,"number must be in the range [" + left + ", " + right + "]");
	if(number > right || number < left) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("Constraints check failed: " + errorMessage));
	}
};
constraints_Constraints.constrain = function(number,left,right) {
	if(number < left) {
		return left;
	}
	if(number > right) {
		return right;
	}
	return number;
};
var tools_NullTools = function() { };
tools_NullTools.__name__ = true;
tools_NullTools.coalesce = function(value,defaultValue) {
	if(value == null) {
		return defaultValue;
	} else {
		return value;
	}
};
var exceptions_ValueException = function(errorMessage) {
	exceptions_BaseException.call(this,errorMessage);
};
exceptions_ValueException.__name__ = true;
exceptions_ValueException.__super__ = exceptions_BaseException;
exceptions_ValueException.prototype = $extend(exceptions_BaseException.prototype,{
	toString: function() {
		return "ValueException(" + this.errorMessage + ")";
	}
	,__class__: exceptions_ValueException
});
var color_LiteralColors = function() { };
color_LiteralColors.__name__ = true;
var color_MonoColor = function(value) {
	color_BaseColor.call(this);
	constraints_Constraints.checkRange(value,0,255);
	this.value = value;
};
color_MonoColor.__name__ = true;
color_MonoColor.__super__ = color_BaseColor;
color_MonoColor.prototype = $extend(color_BaseColor.prototype,{
	calculateRGB: function() {
		this.rgbValue = tools_NullTools.coalesce(this.rgbValue,{ r : this.value, g : this.value, b : this.value});
	}
	,toString: function() {
		return "MonoColor(" + this.value + ")";
	}
	,__class__: color_MonoColor
});
var color_RGB24Color = function(value) {
	color_BaseColor.call(this);
	this.value = value;
};
color_RGB24Color.__name__ = true;
color_RGB24Color.__super__ = color_BaseColor;
color_RGB24Color.prototype = $extend(color_BaseColor.prototype,{
	calculateRGB: function() {
		this.rgbValue = tools_NullTools.coalesce(this.rgbValue,{ r : (this.value & 16711680) >> 16, g : (this.value & 65280) >> 8, b : this.value & 255});
	}
	,toString: function() {
		return "RGB24Color(" + this.value + ")";
	}
	,__class__: color_RGB24Color
});
var ds__$HashMap_HashMap_$Impl_$ = {};
ds__$HashMap_HashMap_$Impl_$.__name__ = true;
ds__$HashMap_HashMap_$Impl_$._new = function() {
	var this1 = new haxe_ds_StringMap();
	return this1;
};
ds__$HashMap_HashMap_$Impl_$.get = function(this1,key) {
	var key1 = Std.string(key);
	return __map_reserved[key1] != null ? this1.getReserved(key1) : this1.h[key1];
};
ds__$HashMap_HashMap_$Impl_$.set = function(this1,key,val) {
	var key1 = Std.string(key);
	if(__map_reserved[key1] != null) {
		this1.setReserved(key1,val);
	} else {
		this1.h[key1] = val;
	}
	return val;
};
var ds_Ordering = $hxEnums["ds.Ordering"] = { __ename__ : true, __constructs__ : ["EQ","GT","LT"]
	,EQ: {_hx_index:0,__enum__:"ds.Ordering",toString:$estr}
	,GT: {_hx_index:1,__enum__:"ds.Ordering",toString:$estr}
	,LT: {_hx_index:2,__enum__:"ds.Ordering",toString:$estr}
};
var ds_Pair = function(first,second) {
	this.first = first;
	this.second = second;
};
ds_Pair.__name__ = true;
ds_Pair.prototype = {
	toString: function() {
		return "{" + Std.string(this.first) + ", " + Std.string(this.second) + "}";
	}
	,__class__: ds_Pair
};
var ds__$Range_Range_$Impl_$ = {};
ds__$Range_Range_$Impl_$.__name__ = true;
ds__$Range_Range_$Impl_$._new = function(start,end,step) {
	if(step == null) {
		if(start < end) {
			step = 1;
		} else {
			step = -1;
		}
	} else if(start < end && step < 0) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("start is smaller than end and step is negative"));
	} else if(start > end && step > 0) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("start is bigger than end and step is positive"));
	} else if(step == 0) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("step cant be zero"));
	}
	var this1 = [start];
	if(start < end) {
		while(start + step < end) this1.push(start += step);
	} else {
		while(start + step > end) this1.push(start += step);
	}
	return this1;
};
var exceptions_IndexException = function(errorMessage) {
	exceptions_BaseException.call(this,errorMessage);
};
exceptions_IndexException.__name__ = true;
exceptions_IndexException.__super__ = exceptions_BaseException;
exceptions_IndexException.prototype = $extend(exceptions_BaseException.prototype,{
	toString: function() {
		return "IndexException(" + this.errorMessage + ")";
	}
	,__class__: exceptions_IndexException
});
var exceptions_TypeException = function(errorMessage) {
	exceptions_BaseException.call(this,errorMessage);
};
exceptions_TypeException.__name__ = true;
exceptions_TypeException.__super__ = exceptions_BaseException;
exceptions_TypeException.prototype = $extend(exceptions_BaseException.prototype,{
	toString: function() {
		return "TypeException(" + this.errorMessage + ")";
	}
	,__class__: exceptions_TypeException
});
var graph_Direction = $hxEnums["graph.Direction"] = { __ename__ : true, __constructs__ : ["Left","Right","Up","Down","Undefined"]
	,Left: {_hx_index:0,__enum__:"graph.Direction",toString:$estr}
	,Right: {_hx_index:1,__enum__:"graph.Direction",toString:$estr}
	,Up: {_hx_index:2,__enum__:"graph.Direction",toString:$estr}
	,Down: {_hx_index:3,__enum__:"graph.Direction",toString:$estr}
	,Undefined: {_hx_index:4,__enum__:"graph.Direction",toString:$estr}
};
var graph_Labyrinth = function(n,m,walls) {
	this.used = ds__$HashMap_HashMap_$Impl_$._new();
	this.nodes = [];
	this.previousTurn = ds__$HashMap_HashMap_$Impl_$._new();
	this.allowedDirections = ds__$HashMap_HashMap_$Impl_$._new();
	walls = tools_NullTools.coalesce(walls,[]);
	this.rows = n;
	this.cols = m;
	var _g = [];
	var _g1 = 0;
	var _g2 = this.rows;
	while(_g1 < _g2) {
		var row = _g1++;
		var _g11 = 0;
		var _g21 = this.cols;
		while(_g11 < _g21) {
			var col = _g11++;
			var direction = graph_Direction.Left;
			_g.push(new graph_Node(row,col,direction));
			var direction1 = graph_Direction.Right;
			_g.push(new graph_Node(row,col,direction1));
			var direction2 = graph_Direction.Up;
			_g.push(new graph_Node(row,col,direction2));
			var direction3 = graph_Direction.Down;
			_g.push(new graph_Node(row,col,direction3));
		}
	}
	this.nodes = _g;
	var _g3 = 0;
	var _g4 = this.nodes;
	while(_g3 < _g4.length) {
		var node = _g4[_g3];
		++_g3;
		var key = Std.string(node);
		var _this = this.allowedDirections;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,true);
		} else {
			_this.h[key] = true;
		}
	}
	var _g5 = 0;
	var _g6 = this.rows;
	while(_g5 < _g6) {
		var row1 = _g5++;
		var this1 = this.allowedDirections;
		var key1 = Std.string(new graph_Node(row1,0,graph_Direction.Left));
		var _this1 = this1;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,false);
		} else {
			_this1.h[key1] = false;
		}
		var this2 = this.allowedDirections;
		var key2 = Std.string(new graph_Node(row1,this.cols - 1,graph_Direction.Right));
		var _this2 = this2;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,false);
		} else {
			_this2.h[key2] = false;
		}
	}
	var _g7 = 0;
	var _g8 = this.cols;
	while(_g7 < _g8) {
		var col1 = _g7++;
		var this3 = this.allowedDirections;
		var key3 = Std.string(new graph_Node(0,col1,graph_Direction.Up));
		var _this3 = this3;
		if(__map_reserved[key3] != null) {
			_this3.setReserved(key3,false);
		} else {
			_this3.h[key3] = false;
		}
		var this4 = this.allowedDirections;
		var key4 = Std.string(new graph_Node(this.rows - 1,col1,graph_Direction.Down));
		var _this4 = this4;
		if(__map_reserved[key4] != null) {
			_this4.setReserved(key4,false);
		} else {
			_this4.h[key4] = false;
		}
	}
	var _g9 = 0;
	while(_g9 < walls.length) {
		var wall = walls[_g9];
		++_g9;
		var row11 = wall[0];
		var col11 = wall[1];
		var row2 = wall[2];
		var col2 = wall[3];
		if(row11 > row2) {
			var tmp = row2;
			row2 = row11;
			row11 = tmp;
		}
		if(col11 > col2) {
			var tmp1 = col2;
			col2 = row11;
			col11 = tmp1;
		}
		if(col11 == col2) {
			var _g91 = row11;
			var _g10 = row2;
			while(_g91 < _g10) {
				var row3 = _g91++;
				var this5 = this.allowedDirections;
				var key5 = Std.string(new graph_Node(row3,col11,graph_Direction.Left));
				var _this5 = this5;
				if(__map_reserved[key5] != null) {
					_this5.setReserved(key5,false);
				} else {
					_this5.h[key5] = false;
				}
				var this6 = this.allowedDirections;
				var key6 = Std.string(new graph_Node(row3,col11 - 1,graph_Direction.Right));
				var _this6 = this6;
				if(__map_reserved[key6] != null) {
					_this6.setReserved(key6,false);
				} else {
					_this6.h[key6] = false;
				}
			}
		} else {
			var _g92 = col11;
			var _g101 = col2;
			while(_g92 < _g101) {
				var col3 = _g92++;
				var this7 = this.allowedDirections;
				var key7 = Std.string(new graph_Node(row11,col3,graph_Direction.Up));
				var _this7 = this7;
				if(__map_reserved[key7] != null) {
					_this7.setReserved(key7,false);
				} else {
					_this7.h[key7] = false;
				}
				var this8 = this.allowedDirections;
				var key8 = Std.string(new graph_Node(row11 - 1,col3,graph_Direction.Down));
				var _this8 = this8;
				if(__map_reserved[key8] != null) {
					_this8.setReserved(key8,false);
				} else {
					_this8.h[key8] = false;
				}
			}
		}
	}
};
graph_Labyrinth.__name__ = true;
graph_Labyrinth.prototype = {
	bfs: function(nodeStart) {
		var used = ds__$HashMap_HashMap_$Impl_$._new();
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var key = Std.string(node);
			var _this = used;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,false);
			} else {
				_this.h[key] = false;
			}
		}
		var queue = new polygonal_ds_LinkedQueue();
		var key1 = Std.string(nodeStart);
		var _this1 = used;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,true);
		} else {
			_this1.h[key1] = true;
		}
		queue.enqueue(nodeStart);
		while(queue.mSize != 0) {
			var currentNode = queue.dequeue();
			var nextNode = currentNode.turnLeft();
			var key2 = Std.string(nextNode);
			var _this2 = used;
			if(!(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2])) {
				queue.enqueue(nextNode);
				var key3 = Std.string(nextNode);
				var _this3 = used;
				if(__map_reserved[key3] != null) {
					_this3.setReserved(key3,true);
				} else {
					_this3.h[key3] = true;
				}
				var key4 = Std.string(nodeStart);
				var _this4 = this.previousTurn;
				var this1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
				var val = movementExecutor_Movement.TurnLeft;
				var key5 = Std.string(nextNode);
				var _this5 = this1;
				if(__map_reserved[key5] != null) {
					_this5.setReserved(key5,val);
				} else {
					_this5.h[key5] = val;
				}
			}
			nextNode = currentNode.turnRight();
			var key6 = Std.string(nextNode);
			var _this6 = used;
			if(!(__map_reserved[key6] != null ? _this6.getReserved(key6) : _this6.h[key6])) {
				queue.enqueue(nextNode);
				var key7 = Std.string(nextNode);
				var _this7 = used;
				if(__map_reserved[key7] != null) {
					_this7.setReserved(key7,true);
				} else {
					_this7.h[key7] = true;
				}
				var key8 = Std.string(nodeStart);
				var _this8 = this.previousTurn;
				var this2 = __map_reserved[key8] != null ? _this8.getReserved(key8) : _this8.h[key8];
				var val1 = movementExecutor_Movement.TurnRight;
				var key9 = Std.string(nextNode);
				var _this9 = this2;
				if(__map_reserved[key9] != null) {
					_this9.setReserved(key9,val1);
				} else {
					_this9.h[key9] = val1;
				}
			}
			if(currentNode.canGo(this.allowedDirections)) {
				nextNode = currentNode.go();
				var key10 = Std.string(nextNode);
				var _this10 = used;
				if(!(__map_reserved[key10] != null ? _this10.getReserved(key10) : _this10.h[key10])) {
					queue.enqueue(nextNode);
					var key11 = Std.string(nextNode);
					var _this11 = used;
					if(__map_reserved[key11] != null) {
						_this11.setReserved(key11,true);
					} else {
						_this11.h[key11] = true;
					}
					var key12 = Std.string(nodeStart);
					var _this12 = this.previousTurn;
					var this3 = __map_reserved[key12] != null ? _this12.getReserved(key12) : _this12.h[key12];
					var val2 = movementExecutor_Movement.Go;
					var key13 = Std.string(nextNode);
					var _this13 = this3;
					if(__map_reserved[key13] != null) {
						_this13.setReserved(key13,val2);
					} else {
						_this13.h[key13] = val2;
					}
				}
			}
		}
	}
	,getPath: function(nodeFrom,nodeTo) {
		if(nodeFrom.direction == graph_Direction.Undefined) {
			throw new js__$Boot_HaxeError("Undefined starting node direction");
		}
		if(nodeTo.direction._hx_index == 4) {
			var minPath = this.path(nodeFrom,nodeTo.changeDirection(graph_Direction.Left));
			var i = graph_Direction.Left;
			var currentPath = this.path(nodeFrom,nodeTo.changeDirection(i));
			if(minPath.length > currentPath.length) {
				minPath = currentPath;
			}
			var i1 = graph_Direction.Right;
			var currentPath1 = this.path(nodeFrom,nodeTo.changeDirection(i1));
			if(minPath.length > currentPath1.length) {
				minPath = currentPath1;
			}
			var i2 = graph_Direction.Down;
			var currentPath2 = this.path(nodeFrom,nodeTo.changeDirection(i2));
			if(minPath.length > currentPath2.length) {
				minPath = currentPath2;
			}
			var i3 = graph_Direction.Up;
			var currentPath3 = this.path(nodeFrom,nodeTo.changeDirection(i3));
			if(minPath.length > currentPath3.length) {
				minPath = currentPath3;
			}
			return minPath;
		} else {
			return this.path(nodeFrom,nodeTo);
		}
	}
	,path: function(nodeFrom,nodeTo) {
		var currentPath = [];
		var this1 = this.previousTurn;
		var val = ds__$HashMap_HashMap_$Impl_$._new();
		var key = Std.string(nodeFrom);
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,val);
		} else {
			_this.h[key] = val;
		}
		this.bfs(nodeFrom);
		while(true) {
			var key1 = Std.string(nodeFrom);
			var _this1 = this.previousTurn;
			var this2 = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var key2 = Std.string(nodeTo);
			var _this2 = this2;
			if(!((__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]) != null)) {
				break;
			}
			var key3 = Std.string(nodeFrom);
			var _this3 = this.previousTurn;
			var this3 = __map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3];
			var key4 = Std.string(nodeTo);
			var _this4 = this3;
			var currentTurn = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
			currentPath.push(currentTurn);
			switch(currentTurn._hx_index) {
			case 0:
				nodeTo = nodeTo.goBack();
				break;
			case 1:
				nodeTo = nodeTo.turnRight();
				break;
			case 2:
				nodeTo = nodeTo.turnLeft();
				break;
			case 3:
				nodeTo = nodeTo.turnLeft().turnLeft();
				break;
			case 4:
				throw new js__$Boot_HaxeError("Undifined Movement");
			}
		}
		currentPath.reverse();
		return currentPath;
	}
	,dfs: function(currentNode,args) {
		var key = Std.string(currentNode);
		var _this = this.used;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,true);
		} else {
			_this.h[key] = true;
		}
		this.nodes.push(currentNode);
		var this1 = this.allowedDirections;
		var key1 = currentNode.turnLeft();
		var val = !args.readLeft();
		var key2 = Std.string(key1);
		var _this1 = this1;
		if(__map_reserved[key2] != null) {
			_this1.setReserved(key2,val);
		} else {
			_this1.h[key2] = val;
		}
		var this2 = this.allowedDirections;
		var key3 = Std.string(currentNode.turnLeft());
		var _this2 = this2;
		if(!(__map_reserved[key3] != null ? _this2.getReserved(key3) : _this2.h[key3])) {
			var this3 = this.used;
			var key4 = Std.string(currentNode.turnLeft());
			var _this3 = this3;
			if(__map_reserved[key4] != null) {
				_this3.setReserved(key4,true);
			} else {
				_this3.h[key4] = true;
			}
		}
		var this4 = this.allowedDirections;
		var key5 = currentNode.turnRight();
		var val1 = !args.readRight();
		var key6 = Std.string(key5);
		var _this4 = this4;
		if(__map_reserved[key6] != null) {
			_this4.setReserved(key6,val1);
		} else {
			_this4.h[key6] = val1;
		}
		var this5 = this.allowedDirections;
		var key7 = Std.string(currentNode.turnRight());
		var _this5 = this5;
		if(!(__map_reserved[key7] != null ? _this5.getReserved(key7) : _this5.h[key7])) {
			var this6 = this.used;
			var key8 = Std.string(currentNode.turnRight());
			var _this6 = this6;
			if(__map_reserved[key8] != null) {
				_this6.setReserved(key8,true);
			} else {
				_this6.h[key8] = true;
			}
		}
		var this7 = this.allowedDirections;
		var val2 = !args.readFront();
		var key9 = Std.string(currentNode);
		var _this7 = this7;
		if(__map_reserved[key9] != null) {
			_this7.setReserved(key9,val2);
		} else {
			_this7.h[key9] = val2;
		}
		var tmp;
		var this8 = this.used;
		var key10 = Std.string(currentNode.turnLeft());
		var _this8 = this8;
		if(!(__map_reserved[key10] != null ? _this8.getReserved(key10) : _this8.h[key10])) {
			var this9 = this.allowedDirections;
			var key11 = Std.string(currentNode.turnLeft());
			var _this9 = this9;
			tmp = __map_reserved[key11] != null ? _this9.getReserved(key11) : _this9.h[key11];
		} else {
			tmp = false;
		}
		if(tmp) {
			args.executor.add(movementExecutor_Movement.TurnLeft);
			args.executor.execute();
			this.dfs(currentNode.turnLeft(),args);
			args.executor.add(movementExecutor_Movement.TurnRight);
		}
		var tmp1;
		var this10 = this.used;
		var key12 = Std.string(currentNode.turnRight());
		var _this10 = this10;
		if(!(__map_reserved[key12] != null ? _this10.getReserved(key12) : _this10.h[key12])) {
			var this11 = this.allowedDirections;
			var key13 = Std.string(currentNode.turnRight());
			var _this11 = this11;
			tmp1 = __map_reserved[key13] != null ? _this11.getReserved(key13) : _this11.h[key13];
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			args.executor.add(movementExecutor_Movement.TurnRight);
			args.executor.execute();
			this.dfs(currentNode.turnRight(),args);
			args.executor.add(movementExecutor_Movement.TurnLeft);
		}
		var tmp2;
		var this12 = this.used;
		var key14 = Std.string(currentNode.go());
		var _this12 = this12;
		if(!(__map_reserved[key14] != null ? _this12.getReserved(key14) : _this12.h[key14])) {
			var key15 = Std.string(currentNode);
			var _this13 = this.allowedDirections;
			tmp2 = __map_reserved[key15] != null ? _this13.getReserved(key15) : _this13.h[key15];
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			var this13 = this.used;
			var key16 = Std.string(currentNode.go().reverseDirection());
			var _this14 = this13;
			if(__map_reserved[key16] != null) {
				_this14.setReserved(key16,true);
			} else {
				_this14.h[key16] = true;
			}
			args.executor.add(movementExecutor_Movement.Go);
			args.executor.execute();
			this.dfs(currentNode.go(),args);
			args.executor.add(movementExecutor_Movement.TurnAround);
			args.executor.add(movementExecutor_Movement.Go);
			args.executor.execute();
			args.executor.add(movementExecutor_Movement.TurnAround);
		}
	}
	,localizeUndefined: function(startDirection,executor,readLeft,readRight,readFront,readBack) {
		var startPoint = new graph_Node(0,0,startDirection);
		this.dfs(startPoint,{ executor : executor, readLeft : readLeft, readRight : readRight, readFront : readFront, readBack : readBack});
		executor.add(movementExecutor_Movement.TurnAround);
		executor.execute();
		this.dfs(startPoint.reverseDirection(),{ executor : executor, readLeft : readLeft, readRight : readRight, readFront : readFront, readBack : readBack});
		startDirection = startPoint.reverseDirection().direction;
		var minRow = 0;
		var minCol = 0;
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			minRow = js_Boot.__cast(Math.min(node.row,minRow) , Int);
			minCol = js_Boot.__cast(Math.min(node.col,minCol) , Int);
		}
		var addToRow = js_Boot.__cast(Math.abs(minRow) , Int);
		var addToCol = js_Boot.__cast(Math.abs(minCol) , Int);
		var tmpAllowed = ds__$HashMap_HashMap_$Impl_$._new();
		var tmpNodes = [];
		var _g2 = 0;
		var _g3 = this.nodes;
		while(_g2 < _g3.length) {
			var node1 = _g3[_g2];
			++_g2;
			var curNode = new graph_Node(node1.row + addToRow,node1.col + addToCol,node1.direction);
			tmpNodes.push(curNode);
			var key = Std.string(node1);
			var _this = this.allowedDirections;
			var val = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			var key1 = Std.string(curNode);
			var _this1 = tmpAllowed;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,val);
			} else {
				_this1.h[key1] = val;
			}
		}
		this.allowedDirections = tmpAllowed;
		this.nodes = tmpNodes;
		return new graph_Node(addToRow,addToCol,startDirection);
	}
	,__class__: graph_Labyrinth
};
var graph_Node = function(row,col,direction) {
	var _g = new haxe_ds_EnumValueMap();
	_g.set(graph_Direction.Down,graph_Direction.Up);
	_g.set(graph_Direction.Up,graph_Direction.Down);
	_g.set(graph_Direction.Right,graph_Direction.Left);
	_g.set(graph_Direction.Left,graph_Direction.Right);
	this.backwardDirection = _g;
	var _g1 = new haxe_ds_EnumValueMap();
	_g1.set(graph_Direction.Down,graph_Direction.Left);
	_g1.set(graph_Direction.Right,graph_Direction.Down);
	_g1.set(graph_Direction.Up,graph_Direction.Right);
	_g1.set(graph_Direction.Left,graph_Direction.Up);
	this.rightDirection = _g1;
	var _g2 = new haxe_ds_EnumValueMap();
	_g2.set(graph_Direction.Left,graph_Direction.Down);
	_g2.set(graph_Direction.Down,graph_Direction.Right);
	_g2.set(graph_Direction.Right,graph_Direction.Up);
	_g2.set(graph_Direction.Up,graph_Direction.Left);
	this.leftDirection = _g2;
	this.row = row;
	this.col = col;
	this.direction = tools_NullTools.coalesce(direction,graph_Direction.Undefined);
};
graph_Node.__name__ = true;
graph_Node.prototype = {
	changeDirection: function(direction) {
		return new graph_Node(this.row,this.col,direction);
	}
	,go: function(direction) {
		direction = direction != null ? direction : this.direction;
		switch(direction._hx_index) {
		case 0:
			return new graph_Node(this.row,this.col - 1,direction);
		case 1:
			return new graph_Node(this.row,this.col + 1,direction);
		case 2:
			return new graph_Node(this.row - 1,this.col,direction);
		case 3:
			return new graph_Node(this.row + 1,this.col,direction);
		case 4:
			throw new js__$Boot_HaxeError("Moving in undefined direction");
		}
	}
	,turnLeft: function() {
		return new graph_Node(this.row,this.col,this.leftDirection.get(this.direction));
	}
	,turnRight: function() {
		return new graph_Node(this.row,this.col,this.rightDirection.get(this.direction));
	}
	,goBack: function() {
		var newNode = new graph_Node(this.row,this.col,this.backwardDirection.get(this.direction));
		newNode = newNode.go();
		return newNode.changeDirection(this.direction);
	}
	,reverseDirection: function() {
		return new graph_Node(this.row,this.col,this.backwardDirection.get(this.direction));
	}
	,canGo: function(allowedDirections) {
		var key = Std.string(this);
		var _this = allowedDirections;
		return __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	}
	,toString: function() {
		return "Node(" + this.row + ", " + this.col + ", " + Std.string(this.direction) + ")";
	}
	,__class__: graph_Node
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe__$Int32_Int32_$Impl_$ = {};
haxe__$Int32_Int32_$Impl_$.__name__ = true;
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64_Int64_$Impl_$ = {};
haxe__$Int64_Int64_$Impl_$.__name__ = true;
haxe__$Int64_Int64_$Impl_$.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var this2 = new haxe__$Int64__$_$_$Int64(0,10);
	var ten = this2;
	while(true) {
		var b_high1 = 0;
		var b_low1 = 0;
		if(!(i.high != b_high1 || i.low != b_low1)) {
			break;
		}
		var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this3 = new haxe__$Int64__$_$_$Int64(high1,low1);
			i = this3;
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this3 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this3;
	} else {
		var this4 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this4;
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = ~divisor.low + 1 | 0;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this5 = new haxe__$Int64__$_$_$Int64(high1,low1);
		divisor = this5;
	} else {
		divisor = divisor;
	}
	var this6 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this6;
	var this7 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this7;
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this8 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this8;
		} else if(b < 32) {
			var this9 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this9;
		} else {
			var this10 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this10;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this11 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this11;
		} else if(b1 < 32) {
			var this12 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this12;
		} else {
			var this13 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this13;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			var this14 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this14;
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				var ret2 = high2--;
				high2 = high2 | 0;
			}
			var this15 = new haxe__$Int64__$_$_$Int64(high2,low2);
			modulus = this15;
		}
		var b2 = 1;
		b2 &= 63;
		if(b2 == 0) {
			var this16 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this16;
		} else if(b2 < 32) {
			var this17 = new haxe__$Int64__$_$_$Int64(mask.high >>> b2,mask.high << 32 - b2 | mask.low >>> b2);
			mask = this17;
		} else {
			var this18 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b2 - 32);
			mask = this18;
		}
		var b3 = 1;
		b3 &= 63;
		if(b3 == 0) {
			var this19 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this19;
		} else if(b3 < 32) {
			var this20 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b3,divisor.high << 32 - b3 | divisor.low >>> b3);
			divisor = this20;
		} else {
			var this21 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b3 - 32);
			divisor = this21;
		}
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = ~quotient.low + 1 | 0;
		if(low3 == 0) {
			var ret3 = high3++;
			high3 = high3 | 0;
		}
		var this22 = new haxe__$Int64__$_$_$Int64(high3,low3);
		quotient = this22;
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = ~modulus.low + 1 | 0;
		if(low4 == 0) {
			var ret4 = high4++;
			high4 = high4 | 0;
		}
		var this23 = new haxe__$Int64__$_$_$Int64(high4,low4);
		modulus = this23;
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var image_Corners = function(leftTop,rightTop,rightBottom,leftBottom) {
	this.leftTop = leftTop;
	this.rightTop = rightTop;
	this.rightBottom = rightBottom;
	this.leftBottom = leftBottom;
};
image_Corners.__name__ = true;
image_Corners.prototype = {
	__class__: image_Corners
};
var image__$Image_Image_$Impl_$ = {};
image__$Image_Image_$Impl_$.__name__ = true;
image__$Image_Image_$Impl_$._new = function(pixels) {
	var _g = 0;
	var _g1 = pixels;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(i.length != pixels[0].length) {
			throw new js__$Boot_HaxeError(new exceptions_ValueException("all row arrays must have the same length"));
		}
	}
	var this1 = pixels;
	return this1;
};
image__$Image_Image_$Impl_$.at = function(this1,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	return this1[y][x];
};
image__$Image_Image_$Impl_$.get = function(this1,index) {
	return this1[index];
};
image__$Image_Image_$Impl_$.set = function(this1,index,val) {
	this1[index] = val;
	return val;
};
var image__$Pixel_Pixel_$Impl_$ = {};
image__$Pixel_Pixel_$Impl_$.__name__ = true;
image__$Pixel_Pixel_$Impl_$.get_x = function(this1) {
	return science_geometry__$Point_Point_$Impl_$.get_x(this1);
};
image__$Pixel_Pixel_$Impl_$.set_x = function(this1,value) {
	return science_geometry__$Point_Point_$Impl_$.set_x(this1,value);
};
image__$Pixel_Pixel_$Impl_$.get_y = function(this1) {
	return science_geometry__$Point_Point_$Impl_$.get_y(this1);
};
image__$Pixel_Pixel_$Impl_$.set_y = function(this1,value) {
	return science_geometry__$Point_Point_$Impl_$.set_y(this1,value);
};
image__$Pixel_Pixel_$Impl_$._new = function(x,y,constraintsX,constraintsY) {
	var this1 = science_geometry__$Point_Point_$Impl_$._new(x < 0 ? 0 : x,y < 0 ? 0 : y);
	if(constraintsX != null && science_geometry__$Point_Point_$Impl_$.get_x(this1) > constraintsX) {
		science_geometry__$Point_Point_$Impl_$.set_x(this1,constraintsX);
	}
	if(constraintsY != null && science_geometry__$Point_Point_$Impl_$.get_y(this1) > constraintsY) {
		science_geometry__$Point_Point_$Impl_$.set_y(this1,constraintsY);
	}
	return this1;
};
var image__$RawImage_RawImage_$Impl_$ = {};
image__$RawImage_RawImage_$Impl_$.__name__ = true;
image__$RawImage_RawImage_$Impl_$._new = function(rawPhoto) {
	var _g = [];
	var _g1 = 0;
	var _g2 = rawPhoto.length;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(new color_RGB24Color(Std.parseInt(rawPhoto.charAt(i))));
	}
	var this1 = _g;
	return this1;
};
image__$RawImage_RawImage_$Impl_$.toImage = function(this1) {
	var w = 160;
	var h = 120;
	var res = [];
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		var tmp = [];
		var _g2 = 0;
		var _g11 = w;
		while(_g2 < _g11) {
			var j = _g2++;
			tmp.push(tools_ColorTools.toRGB(this1[w * i + j]));
		}
		res.push(tmp);
	}
	return image__$Image_Image_$Impl_$._new(res);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var movementExecutor_Movement = $hxEnums["movementExecutor.Movement"] = { __ename__ : true, __constructs__ : ["Go","TurnLeft","TurnRight","TurnAround","Undefined"]
	,Go: {_hx_index:0,__enum__:"movementExecutor.Movement",toString:$estr}
	,TurnLeft: {_hx_index:1,__enum__:"movementExecutor.Movement",toString:$estr}
	,TurnRight: {_hx_index:2,__enum__:"movementExecutor.Movement",toString:$estr}
	,TurnAround: {_hx_index:3,__enum__:"movementExecutor.Movement",toString:$estr}
	,Undefined: {_hx_index:4,__enum__:"movementExecutor.Movement",toString:$estr}
};
var movementExecutor_MovementExecutor = function(turn,go) {
	this.execQueue = [];
	this.turn = turn;
	this.go = go;
};
movementExecutor_MovementExecutor.__name__ = true;
movementExecutor_MovementExecutor.prototype = {
	add: function(movement) {
		if(movement._hx_index == 4) {
			throw new js__$Boot_HaxeError(new movementExecutor_exceptions_MovementException("cannot pass Undefined movement to the executor"));
		}
		this.execQueue.push(movement);
	}
	,execute: function() {
		var turnValue = 0;
		var _g = 0;
		var _g1 = this.execQueue;
		while(_g < _g1.length) {
			var movement = _g1[_g];
			++_g;
			switch(movement._hx_index) {
			case 1:
				turnValue += 90;
				break;
			case 2:
				turnValue -= 90;
				break;
			case 3:
				turnValue += 180;
				break;
			default:
				if(turnValue != 0) {
					this.turn(turnValue);
				}
				turnValue = 0;
				this.go();
			}
		}
		if(turnValue != 0) {
			this.turn(turnValue);
		}
		this.execQueue = [];
	}
	,__class__: movementExecutor_MovementExecutor
};
var movementExecutor_exceptions_MovementException = function(errorMessage) {
	exceptions_BaseException.call(this,errorMessage);
};
movementExecutor_exceptions_MovementException.__name__ = true;
movementExecutor_exceptions_MovementException.__super__ = exceptions_BaseException;
movementExecutor_exceptions_MovementException.prototype = $extend(exceptions_BaseException.prototype,{
	toString: function() {
		return "MovementException(" + this.errorMessage + ")";
	}
	,__class__: movementExecutor_exceptions_MovementException
});
var pid_PID = function(interval,min,max,ks) {
	this.integral = 0;
	this.prevError = 0;
	this.interval = interval;
	this.min = min;
	this.max = max;
	this.kp = ks.kp;
	this.kd = tools_NullTools.coalesce(ks.kd,0);
	this.ki = tools_NullTools.coalesce(ks.ki,0);
};
pid_PID.__name__ = true;
pid_PID.prototype = {
	calculate: function(error) {
		var pOut = error * this.kp;
		var derivative;
		var _g = tools_TimeTools.toMilliseconds(this.interval);
		if(_g._hx_index == 0) {
			var timeValue = _g.value;
			this.integral += error * timeValue;
			derivative = error * this.prevError / timeValue;
		} else {
			return 0;
		}
		var iOut = this.integral * this.ki;
		var dOut = derivative * this.kd;
		var res = pOut + iOut + dOut;
		if(res > this.max) {
			res = this.max;
		}
		if(res < this.min) {
			res = this.min;
		}
		this.prevError = error;
		return res;
	}
	,__class__: pid_PID
};
var polygonal_ds_Cloneable = function() { };
polygonal_ds_Cloneable.__name__ = true;
polygonal_ds_Cloneable.__isInterface__ = true;
polygonal_ds_Cloneable.prototype = {
	__class__: polygonal_ds_Cloneable
};
var polygonal_ds_Hashable = function() { };
polygonal_ds_Hashable.__name__ = true;
polygonal_ds_Hashable.__isInterface__ = true;
polygonal_ds_Hashable.prototype = {
	__class__: polygonal_ds_Hashable
};
var polygonal_ds_Collection = function() { };
polygonal_ds_Collection.__name__ = true;
polygonal_ds_Collection.__isInterface__ = true;
polygonal_ds_Collection.__interfaces__ = [polygonal_ds_Hashable];
polygonal_ds_Collection.prototype = {
	__class__: polygonal_ds_Collection
};
var polygonal_ds_HashKey = function() { };
polygonal_ds_HashKey.__name__ = true;
polygonal_ds_HashKey.next = function() {
	if(polygonal_ds_HashKey._counter == null) {
		polygonal_ds_HashKey._counter = 0;
	}
	return polygonal_ds_HashKey._counter++;
};
var polygonal_ds_Itr = function() { };
polygonal_ds_Itr.__name__ = true;
polygonal_ds_Itr.__isInterface__ = true;
polygonal_ds_Itr.prototype = {
	__class__: polygonal_ds_Itr
};
var polygonal_ds_Queue = function() { };
polygonal_ds_Queue.__name__ = true;
polygonal_ds_Queue.__isInterface__ = true;
polygonal_ds_Queue.__interfaces__ = [polygonal_ds_Collection];
polygonal_ds_Queue.prototype = {
	__class__: polygonal_ds_Queue
};
var polygonal_ds_LinkedQueue = function(reservedSize,source) {
	if(reservedSize == null) {
		reservedSize = 0;
	}
	this.mIterator = null;
	this.mPoolSize = 0;
	this.mSize = 0;
	this.reuseIterator = false;
	this.key = polygonal_ds_HashKey.next();
	this.mReservedSize = reservedSize;
	if(reservedSize > 0) {
		this.mHeadPool = this.mTailPool = new polygonal_ds_LinkedQueueNode(null);
	} else {
		this.mHeadPool = null;
		this.mTailPool = null;
	}
	if(source != null && source.length > 0) {
		this.mSize = source.length;
		var x = source[0];
		var tmp;
		if(this.mReservedSize == 0 || this.mPoolSize == 0) {
			tmp = new polygonal_ds_LinkedQueueNode(x);
		} else {
			var n = this.mHeadPool;
			this.mHeadPool = this.mHeadPool.next;
			this.mPoolSize--;
			n.val = x;
			tmp = n;
		}
		this.mHead = this.mTail = tmp;
		var _g = 1;
		var _g1 = this.mSize;
		while(_g < _g1) {
			var i = _g++;
			var x1 = source[i];
			var tmp1;
			if(this.mReservedSize == 0 || this.mPoolSize == 0) {
				tmp1 = new polygonal_ds_LinkedQueueNode(x1);
			} else {
				var n1 = this.mHeadPool;
				this.mHeadPool = this.mHeadPool.next;
				this.mPoolSize--;
				n1.val = x1;
				tmp1 = n1;
			}
			this.mTail = this.mTail.next = tmp1;
		}
	} else {
		this.mHead = this.mTail = null;
	}
};
polygonal_ds_LinkedQueue.__name__ = true;
polygonal_ds_LinkedQueue.__interfaces__ = [polygonal_ds_Queue];
polygonal_ds_LinkedQueue.prototype = {
	peek: function() {
		return this.mHead.val;
	}
	,back: function() {
		return this.mTail.val;
	}
	,enqueue: function(val) {
		this.mSize++;
		var node;
		if(this.mReservedSize == 0 || this.mPoolSize == 0) {
			node = new polygonal_ds_LinkedQueueNode(val);
		} else {
			var n = this.mHeadPool;
			this.mHeadPool = this.mHeadPool.next;
			this.mPoolSize--;
			n.val = val;
			node = n;
		}
		if(this.mHead == null) {
			this.mHead = this.mTail = node;
			this.mHead.next = null;
		} else {
			this.mTail.next = node;
			this.mTail = node;
		}
	}
	,dequeue: function() {
		this.mSize--;
		var node = this.mHead;
		if(this.mHead == this.mTail) {
			this.mHead = null;
			this.mTail = null;
		} else {
			this.mHead = this.mHead.next;
		}
		var val = node.val;
		if(this.mReservedSize > 0 && this.mPoolSize < this.mReservedSize) {
			this.mTailPool = this.mTailPool.next = node;
			node.val = null;
			node.next = null;
			this.mPoolSize++;
		}
		return val;
	}
	,forEach: function(f) {
		var node = this.mHead;
		var _g = 0;
		var _g1 = this.mSize;
		while(_g < _g1) {
			var i = _g++;
			node.val = f(node.val,i);
			node = node.next;
		}
		return this;
	}
	,iter: function(f) {
		var node = this.mHead;
		while(node != null) {
			f(node.val);
			node = node.next;
		}
		return this;
	}
	,shuffle: function(rvals) {
		var s = this.mSize;
		if(rvals == null) {
			while(s > 1) {
				--s;
				var i = polygonal_ds_tools_Shuffle._f() * s | 0;
				var node1 = this.mHead;
				var _g = 0;
				var _g1 = s;
				while(_g < _g1) {
					var j = _g++;
					node1 = node1.next;
				}
				var t = node1.val;
				var node2 = this.mHead;
				var _g2 = 0;
				var _g3 = i;
				while(_g2 < _g3) {
					var j1 = _g2++;
					node2 = node2.next;
				}
				node1.val = node2.val;
				node2.val = t;
			}
		} else {
			var j2 = 0;
			while(s > 1) {
				--s;
				var i1 = rvals[j2++] * s | 0;
				var node11 = this.mHead;
				var _g4 = 0;
				var _g11 = s;
				while(_g4 < _g11) {
					var k = _g4++;
					node11 = node11.next;
				}
				var t1 = node11.val;
				var node21 = this.mHead;
				var _g21 = 0;
				var _g31 = i1;
				while(_g21 < _g31) {
					var l = _g21++;
					node21 = node21.next;
				}
				node11.val = node21.val;
				node21.val = t1;
			}
		}
		return this;
	}
	,toString: function() {
		var b_b = "";
		b_b += Std.string("[ LinkedQueue size=" + this.mSize);
		if(this.mSize == 0) {
			b_b += " ]";
			return b_b;
		}
		b_b += "\n  front\n";
		var node = this.mHead;
		var i = 0;
		var args = [];
		var x = this.mSize;
		var fmt = "  %" + ((x == 0 ? 1 : Math.log(x) / Math.log(10) + 1) | 0) + "d -> %s\n";
		while(node != null) {
			args[0] = i++;
			args[1] = Std.string(node.val);
			b_b += Std.string(polygonal_ds_Printf.format(fmt,args));
			node = node.next;
		}
		b_b += "]";
		return b_b;
	}
	,get_size: function() {
		return this.mSize;
	}
	,free: function() {
		var node = this.mHead;
		var next;
		while(node != null) {
			next = node.next;
			node.next = null;
			node.val = null;
			node = next;
		}
		this.mHead = this.mTail = null;
		node = this.mHeadPool;
		while(node != null) {
			next = node.next;
			node.next = null;
			node.val = null;
			node = next;
		}
		this.mHeadPool = this.mTailPool = null;
		if(this.mIterator != null) {
			this.mIterator.free();
			this.mIterator = null;
		}
	}
	,contains: function(val) {
		var node = this.mHead;
		while(node != null) {
			if(node.val == val) {
				return true;
			}
			node = node.next;
		}
		return false;
	}
	,remove: function(val) {
		if(this.mSize == 0) {
			return false;
		}
		var found = false;
		var node0 = this.mHead;
		var node1 = this.mHead.next;
		if(this.mHead == this.mTail) {
			if(this.mHead.val == val) {
				this.mSize = 0;
				var x = this.mHead;
				var val1 = x.val;
				if(this.mReservedSize > 0 && this.mPoolSize < this.mReservedSize) {
					this.mTailPool = this.mTailPool.next = x;
					x.val = null;
					x.next = null;
					this.mPoolSize++;
				}
				this.mHead = null;
				this.mTail = null;
				return true;
			}
			return false;
		}
		while(node1 != null) if(node1.val == val) {
			found = true;
			if(node1 == this.mTail) {
				this.mTail = node0;
			}
			var node2 = node1.next;
			node0.next = node2;
			var val2 = node1.val;
			if(this.mReservedSize > 0 && this.mPoolSize < this.mReservedSize) {
				this.mTailPool = this.mTailPool.next = node1;
				node1.val = null;
				node1.next = null;
				this.mPoolSize++;
			}
			node1 = node2;
			this.mSize--;
		} else {
			node0 = node1;
			node1 = node1.next;
		}
		if(this.mHead.val == val) {
			found = true;
			var head1 = this.mHead.next;
			var x1 = this.mHead;
			var val3 = x1.val;
			if(this.mReservedSize > 0 && this.mPoolSize < this.mReservedSize) {
				this.mTailPool = this.mTailPool.next = x1;
				x1.val = null;
				x1.next = null;
				this.mPoolSize++;
			}
			this.mHead = head1;
			if(this.mHead == null) {
				this.mTail = null;
			}
			this.mSize--;
		}
		return found;
	}
	,clear: function(gc) {
		if(gc == null) {
			gc = false;
		}
		if(gc || this.mReservedSize > 0) {
			var node = this.mHead;
			while(node != null) {
				var next = node.next;
				var val = node.val;
				if(this.mReservedSize > 0 && this.mPoolSize < this.mReservedSize) {
					this.mTailPool = this.mTailPool.next = node;
					node.val = null;
					node.next = null;
					this.mPoolSize++;
				}
				node = next;
			}
		}
		this.mHead = this.mTail = null;
		this.mSize = 0;
	}
	,iterator: function() {
		if(this.reuseIterator) {
			if(this.mIterator == null) {
				return new polygonal_ds_LinkedQueueIterator(this);
			} else {
				var _this = this.mIterator;
				_this.mWalker = _this.mObject.mHead;
				_this.mHook = null;
			}
			return this.mIterator;
		} else {
			return new polygonal_ds_LinkedQueueIterator(this);
		}
	}
	,isEmpty: function() {
		return this.mSize == 0;
	}
	,toArray: function() {
		if(this.mSize == 0) {
			return [];
		}
		var a = new Array(this.mSize);
		var out = a;
		var i = 0;
		var node = this.mHead;
		while(node != null) {
			out[i++] = node.val;
			node = node.next;
		}
		return out;
	}
	,clone: function(byRef,copier) {
		if(byRef == null) {
			byRef = true;
		}
		var copy = new polygonal_ds_LinkedQueue(this.mReservedSize);
		if(this.mSize == 0) {
			return copy;
		}
		if(byRef) {
			var node = this.mHead;
			if(node != null) {
				copy.mHead = copy.mTail = new polygonal_ds_LinkedQueueNode(node.val);
				copy.mHead.next = copy.mTail;
			}
			if(this.mSize > 1) {
				node = node.next;
				while(node != null) {
					var t = new polygonal_ds_LinkedQueueNode(node.val);
					copy.mTail = copy.mTail.next = t;
					node = node.next;
				}
			}
		} else if(copier == null) {
			var node1 = this.mHead;
			if(node1 != null) {
				copy.mHead = copy.mTail = new polygonal_ds_LinkedQueueNode((js_Boot.__cast(node1.val , polygonal_ds_Cloneable)).clone());
				copy.mHead.next = copy.mTail;
			}
			if(this.mSize > 1) {
				node1 = node1.next;
				var t1;
				while(node1 != null) {
					t1 = new polygonal_ds_LinkedQueueNode((js_Boot.__cast(node1.val , polygonal_ds_Cloneable)).clone());
					copy.mTail = copy.mTail.next = t1;
					node1 = node1.next;
				}
			}
		} else {
			var node2 = this.mHead;
			if(node2 != null) {
				copy.mHead = copy.mTail = new polygonal_ds_LinkedQueueNode(copier(node2.val));
				copy.mHead.next = copy.mTail;
			}
			if(this.mSize > 1) {
				node2 = node2.next;
				while(node2 != null) {
					var t2 = new polygonal_ds_LinkedQueueNode(copier(node2.val));
					copy.mTail = copy.mTail.next = t2;
					node2 = node2.next;
				}
			}
		}
		copy.mSize = this.mSize;
		return copy;
	}
	,getNode: function(x) {
		if(this.mReservedSize == 0 || this.mPoolSize == 0) {
			return new polygonal_ds_LinkedQueueNode(x);
		} else {
			var n = this.mHeadPool;
			this.mHeadPool = this.mHeadPool.next;
			this.mPoolSize--;
			n.val = x;
			return n;
		}
	}
	,putNode: function(x) {
		var val = x.val;
		if(this.mReservedSize > 0 && this.mPoolSize < this.mReservedSize) {
			this.mTailPool = this.mTailPool.next = x;
			x.val = null;
			x.next = null;
			this.mPoolSize++;
		}
		return val;
	}
	,removeNode: function(x) {
		var n = this.mHead;
		if(x == n) {
			this.mHead = x.next;
			if(x == this.mTail) {
				this.mTail = null;
			}
		} else {
			while(n.next != x) n = n.next;
			if(x == this.mTail) {
				this.mTail = null;
			}
			n.next = x.next;
		}
		var val = x.val;
		if(this.mReservedSize > 0 && this.mPoolSize < this.mReservedSize) {
			this.mTailPool = this.mTailPool.next = x;
			x.val = null;
			x.next = null;
			this.mPoolSize++;
		}
		this.mSize--;
	}
	,__class__: polygonal_ds_LinkedQueue
};
var polygonal_ds_LinkedQueueNode = function(x) {
	this.val = x;
};
polygonal_ds_LinkedQueueNode.__name__ = true;
polygonal_ds_LinkedQueueNode.prototype = {
	toString: function() {
		return "" + Std.string(this.val);
	}
	,__class__: polygonal_ds_LinkedQueueNode
};
var polygonal_ds_LinkedQueueIterator = function(x) {
	this.mObject = x;
	this.mWalker = this.mObject.mHead;
	this.mHook = null;
};
polygonal_ds_LinkedQueueIterator.__name__ = true;
polygonal_ds_LinkedQueueIterator.__interfaces__ = [polygonal_ds_Itr];
polygonal_ds_LinkedQueueIterator.prototype = {
	free: function() {
		this.mObject = null;
		this.mWalker = null;
		this.mHook = null;
	}
	,reset: function() {
		this.mWalker = this.mObject.mHead;
		this.mHook = null;
		return this;
	}
	,hasNext: function() {
		return this.mWalker != null;
	}
	,next: function() {
		var x = this.mWalker.val;
		this.mHook = this.mWalker;
		this.mWalker = this.mWalker.next;
		return x;
	}
	,remove: function() {
		var _this = this.mObject;
		var x = this.mHook;
		var n = _this.mHead;
		if(x == n) {
			_this.mHead = x.next;
			if(x == _this.mTail) {
				_this.mTail = null;
			}
		} else {
			while(n.next != x) n = n.next;
			if(x == _this.mTail) {
				_this.mTail = null;
			}
			n.next = x.next;
		}
		var val = x.val;
		if(_this.mReservedSize > 0 && _this.mPoolSize < _this.mReservedSize) {
			_this.mTailPool = _this.mTailPool.next = x;
			x.val = null;
			x.next = null;
			_this.mPoolSize++;
		}
		_this.mSize--;
	}
	,__class__: polygonal_ds_LinkedQueueIterator
};
var polygonal_ds_Printf = function() { };
polygonal_ds_Printf.__name__ = true;
polygonal_ds_Printf.init = function() {
	var this1 = new Array(40);
	polygonal_ds_Printf._padChars = this1;
	polygonal_ds_Printf._padChars[0] = StringTools.rpad("","0",0);
	polygonal_ds_Printf._padChars[1] = StringTools.rpad("","0",1);
	polygonal_ds_Printf._padChars[2] = StringTools.rpad("","0",2);
	polygonal_ds_Printf._padChars[3] = StringTools.rpad("","0",3);
	polygonal_ds_Printf._padChars[4] = StringTools.rpad("","0",4);
	polygonal_ds_Printf._padChars[5] = StringTools.rpad("","0",5);
	polygonal_ds_Printf._padChars[6] = StringTools.rpad("","0",6);
	polygonal_ds_Printf._padChars[7] = StringTools.rpad("","0",7);
	polygonal_ds_Printf._padChars[8] = StringTools.rpad("","0",8);
	polygonal_ds_Printf._padChars[9] = StringTools.rpad("","0",9);
	polygonal_ds_Printf._padChars[10] = StringTools.rpad("","0",10);
	polygonal_ds_Printf._padChars[11] = StringTools.rpad("","0",11);
	polygonal_ds_Printf._padChars[12] = StringTools.rpad("","0",12);
	polygonal_ds_Printf._padChars[13] = StringTools.rpad("","0",13);
	polygonal_ds_Printf._padChars[14] = StringTools.rpad("","0",14);
	polygonal_ds_Printf._padChars[15] = StringTools.rpad("","0",15);
	polygonal_ds_Printf._padChars[16] = StringTools.rpad("","0",16);
	polygonal_ds_Printf._padChars[17] = StringTools.rpad("","0",17);
	polygonal_ds_Printf._padChars[18] = StringTools.rpad("","0",18);
	polygonal_ds_Printf._padChars[19] = StringTools.rpad("","0",19);
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		polygonal_ds_Printf._padChars[i + 20] = StringTools.rpad(""," ",i);
	}
	var this2 = new Array(64);
	polygonal_ds_Printf._tmp = this2;
};
polygonal_ds_Printf.format = function(fmt,args) {
	if(!polygonal_ds_Printf._initialized) {
		polygonal_ds_Printf._initialized = true;
		polygonal_ds_Printf.init();
	}
	var output = new StringBuf();
	var argIndex = 0;
	var tokens = [];
	var _g = 0;
	var _g1 = polygonal_ds_Printf.tokenize(fmt,tokens);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = tokens[i];
		switch(_g2._hx_index) {
		case 0:
			var string = _g2.string;
			output.b += string == null ? "null" : "" + string;
			break;
		case 1:
			var tagArgs = _g2.args;
			var type = _g2.type;
			if(tagArgs.width == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw new js__$Boot_HaxeError(new polygonal_ds_PrintfError("invalid 'width' argument"));
				}
				tagArgs.width = args[argIndex++];
			}
			if(tagArgs.precision == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw new js__$Boot_HaxeError(new polygonal_ds_PrintfError("invalid 'precision' argument"));
				}
				tagArgs.precision = args[argIndex++];
			}
			var value;
			if(tagArgs.pos > -1) {
				if(tagArgs.pos > args.length - 1) {
					throw new js__$Boot_HaxeError(new polygonal_ds_PrintfError("argument index out of range"));
				}
				value = args[tagArgs.pos];
			} else {
				value = args[argIndex++];
			}
			if(value == null) {
				value = "null";
			}
			switch(type._hx_index) {
			case 0:
				var intType = type.type;
				switch(intType._hx_index) {
				case 0:
					polygonal_ds_Printf.formatCharacter(value,tagArgs,output);
					break;
				case 1:
					polygonal_ds_Printf.formatSignedDecimal(value,tagArgs,output);
					break;
				case 2:
					polygonal_ds_Printf.formatUnsignedDecimal(value,tagArgs,output);
					break;
				case 3:
					polygonal_ds_Printf.formatOctal(value,tagArgs,output);
					break;
				case 4:
					polygonal_ds_Printf.formatHexadecimal(value,tagArgs,output);
					break;
				case 5:
					polygonal_ds_Printf.formatBinary(value,tagArgs,output);
					break;
				}
				break;
			case 1:
				var floatType = type.floatType;
				switch(floatType._hx_index) {
				case 0:
					polygonal_ds_Printf.formatFloat(value,tagArgs,output);
					break;
				case 1:
					polygonal_ds_Printf.formatScientific(value,tagArgs,output);
					break;
				case 2:
					polygonal_ds_Printf.formatNaturalFloat(value,tagArgs,output);
					break;
				}
				break;
			case 2:
				polygonal_ds_Printf.formatString(value,tagArgs,output);
				break;
			case 3:
				throw new js__$Boot_HaxeError(new polygonal_ds_PrintfError("specifier 'p' is not supported"));
			case 4:
				throw new js__$Boot_HaxeError(new polygonal_ds_PrintfError("specifier 'n' is not supported"));
			}
			break;
		case 2:
			var name = _g2.name;
			if(!Object.prototype.hasOwnProperty.call(args[0],name)) {
				throw new js__$Boot_HaxeError(new polygonal_ds_PrintfError("no field named \"" + name + "\" found"));
			}
			output.b += Std.string(Std.string(Reflect.field(args[0],name)));
			++argIndex;
			break;
		case 3:
			var _g21 = _g2.pos;
			var _g11 = _g2.string;
			throw new js__$Boot_HaxeError(new polygonal_ds_PrintfError("Invalid format specifier."));
		}
	}
	return output.b;
};
polygonal_ds_Printf.tokenize = function(fmt,output) {
	var i = 0;
	var c = 0;
	var n = 0;
	var buf = new StringBuf();
	var k = fmt.length;
	while(i < k) {
		c = fmt.charCodeAt(i++);
		if(c == 37) {
			c = fmt.charCodeAt(i++);
			if(c == 37) {
				buf.b += String.fromCodePoint(c);
				continue;
			}
			if(buf.b.length > 0) {
				output[n++] = polygonal_ds__$Printf_FormatToken.Raw(buf.b);
				buf = new StringBuf();
			}
			var token;
			if(c == 40) {
				var endPos = fmt.indexOf(")",i);
				if(endPos == -1) {
					token = polygonal_ds__$Printf_FormatToken.Unknown("named parameter",i);
				} else {
					var paramName = HxOverrides.substr(fmt,i,endPos - i);
					i = endPos + 1;
					token = polygonal_ds__$Printf_FormatToken.Property(paramName);
				}
			} else {
				var i1 = 0;
				if(i1 == null) {
					i1 = 0;
				}
				var this1 = i1;
				var params = new polygonal_ds__$Printf_FormatArgs(this1,-1,-1,-1);
				_hx_loop2: while(c >= 32 && c <= 48) switch(c) {
				case 32:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.Space._hx_index;
					break;
				case 35:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index;
					break;
				case 43:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.Plus._hx_index;
					break;
				case 45:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index;
					break;
				case 48:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index;
					break;
				default:
					break _hx_loop2;
				}
				if((params.flags & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0 && (params.flags & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
					params.flags &= -1 - (1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index);
				}
				if((params.flags & 1 << polygonal_ds__$Printf_FormatFlag.Space._hx_index) != 0 && (params.flags & 1 << polygonal_ds__$Printf_FormatFlag.Plus._hx_index) != 0) {
					params.flags &= -1 - (1 << polygonal_ds__$Printf_FormatFlag.Space._hx_index);
				}
				if(c == 42) {
					params.width = null;
					c = fmt.charCodeAt(i++);
				} else if(c >= 48 && c <= 57) {
					var w = 0;
					while(c >= 48 && c <= 57) {
						w = c - 48 + w * 10;
						c = fmt.charCodeAt(i++);
					}
					params.width = w;
					if(c == 36) {
						params.pos = w - 1;
						params.width = -1;
						c = fmt.charCodeAt(i++);
						if(c == 42) {
							params.width = null;
							c = fmt.charCodeAt(i++);
						} else if(c >= 48 && c <= 57) {
							var w1 = 0;
							while(c >= 48 && c <= 57) {
								w1 = c - 48 + w1 * 10;
								c = fmt.charCodeAt(i++);
							}
							params.width = w1;
						}
					}
				}
				if(c == 46) {
					c = fmt.charCodeAt(i++);
					if(c == 42) {
						params.precision = null;
						c = fmt.charCodeAt(i++);
					} else {
						var p = 0;
						if(c >= 48 && c <= 57) {
							while(c >= 48 && c <= 57) {
								p = c - 48 + p * 10;
								c = fmt.charCodeAt(i++);
							}
						}
						params.precision = p;
					}
				}
				_hx_loop6: while(c >= 76 && c <= 108) switch(c) {
				case 76:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.LengthUpperCaseL._hx_index;
					break;
				case 104:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.LengthH._hx_index;
					break;
				case 108:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.LengthLowerCaseL._hx_index;
					break;
				default:
					break _hx_loop6;
				}
				if(c >= 69 && c <= 120) {
					var type;
					switch(c) {
					case 69:
						params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index;
						type = polygonal_ds__$Printf_FormatDataType.FmtFloat(polygonal_ds__$Printf_FloatType.FScientific);
						break;
					case 71:
						params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index;
						type = polygonal_ds__$Printf_FormatDataType.FmtFloat(polygonal_ds__$Printf_FloatType.FNatural);
						break;
					case 88:
						params.flags |= 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index;
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.IHex);
						break;
					case 98:
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.IBin);
						break;
					case 99:
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.ICharacter);
						break;
					case 100:
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.ISignedDecimal);
						break;
					case 101:
						type = polygonal_ds__$Printf_FormatDataType.FmtFloat(polygonal_ds__$Printf_FloatType.FScientific);
						break;
					case 102:
						type = polygonal_ds__$Printf_FormatDataType.FmtFloat(polygonal_ds__$Printf_FloatType.FNormal);
						break;
					case 103:
						type = polygonal_ds__$Printf_FormatDataType.FmtFloat(polygonal_ds__$Printf_FloatType.FNatural);
						break;
					case 105:
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.ISignedDecimal);
						break;
					case 110:
						type = polygonal_ds__$Printf_FormatDataType.FmtNothing;
						break;
					case 111:
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.IOctal);
						break;
					case 112:
						type = polygonal_ds__$Printf_FormatDataType.FmtPointer;
						break;
					case 115:
						type = polygonal_ds__$Printf_FormatDataType.FmtString;
						break;
					case 117:
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.IUnsignedDecimal);
						break;
					case 120:
						type = polygonal_ds__$Printf_FormatDataType.FmtInt(polygonal_ds__$Printf_IntType.IHex);
						break;
					default:
						type = null;
					}
					token = type == null ? polygonal_ds__$Printf_FormatToken.Unknown(String.fromCodePoint(c),i) : polygonal_ds__$Printf_FormatToken.Tag(type,params);
				} else {
					token = polygonal_ds__$Printf_FormatToken.Unknown(String.fromCodePoint(c),i);
				}
			}
			output[n++] = token;
		} else {
			buf.b += String.fromCodePoint(c);
		}
	}
	if(buf.b.length > 0) {
		output[n++] = polygonal_ds__$Printf_FormatToken.Raw(buf.b);
	}
	return n;
};
polygonal_ds_Printf.formatBinary = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			return;
		}
		f &= -1 - (1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index);
	}
	if(p == -1) {
		p = 1;
	}
	var tmp = polygonal_ds_Printf._tmp;
	var l = 0;
	while(true) {
		tmp[l++] = value & 1;
		value >>>= 1;
		if(!(value > 0)) {
			break;
		}
	}
	var m = l;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0b";
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) buf.b += String.fromCodePoint((48 + tmp[m]));
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g2 = 0;
			var _g11 = w - l;
			while(_g2 < _g11) {
				var i1 = _g2++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(w > k) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0 && p == 1) {
				var _g3 = 0;
				var _g12 = w - k;
				while(_g3 < _g12) {
					var i2 = _g3++;
					buf.b += "0";
				}
			} else {
				var _g4 = 0;
				var _g13 = w - k;
				while(_g4 < _g13) {
					var i3 = _g4++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0b";
		}
		if(p > l) {
			var _g5 = 0;
			var _g14 = p - l;
			while(_g5 < _g14) {
				var i4 = _g5++;
				buf.b += "0";
			}
		}
		while(--m > -1) buf.b += String.fromCodePoint((48 + tmp[m]));
	}
};
polygonal_ds_Printf.formatOctal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			buf.b += Std.string((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0 ? "0" : "");
			return;
		}
		f &= -1 - (1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index);
	}
	var tmp = polygonal_ds_Printf._tmp;
	var l = 0;
	while(true) {
		tmp[l++] = value & 7;
		value >>>= 3;
		if(!(value > 0)) {
			break;
		}
	}
	var m = l;
	if(p != -1) {
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
			f &= -1 - (1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index);
			f |= 1 << polygonal_ds__$Printf_FormatFlag.Space._hx_index;
		}
	} else {
		p = 1;
	}
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0";
			++l;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) {
			var x = String.fromCodePoint((48 + tmp[m]));
			buf.b += Std.string(x);
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g2 = 0;
			var _g11 = w - l;
			while(_g2 < _g11) {
				var i1 = _g2++;
				buf.b += " ";
			}
		}
	} else {
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			++l;
		}
		var k = l;
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
				var _g3 = 0;
				var _g12 = w - k;
				while(_g3 < _g12) {
					var i2 = _g3++;
					buf.b += "0";
				}
			} else {
				var _g4 = 0;
				var _g13 = w - k;
				while(_g4 < _g13) {
					var i3 = _g4++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0";
		}
		if(p > l) {
			var _g5 = 0;
			var _g14 = p - l;
			while(_g5 < _g14) {
				var i4 = _g5++;
				buf.b += "0";
			}
		}
		while(--m > -1) {
			var x1 = String.fromCodePoint((48 + tmp[m]));
			buf.b += Std.string(x1);
		}
	}
};
polygonal_ds_Printf.formatHexadecimal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			return;
		}
		f &= -1 - (1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index);
	}
	if(p == -1) {
		p = 1;
	}
	var tmp = polygonal_ds_Printf._tmp;
	var l = 0;
	while(true) {
		tmp[l++] = value & 15;
		value >>>= 4;
		if(!(value > 0)) {
			break;
		}
	}
	var m = l;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index) != 0) {
				buf.b += "0X";
			} else {
				buf.b += "0x";
			}
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		var a = (f & 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index) != 0 ? 65 : 97;
		while(--m > -1) {
			var v = tmp[m];
			if(v < 10) {
				var x = String.fromCodePoint((48 + v));
				buf.b += Std.string(x);
			} else {
				var x1 = String.fromCodePoint((a + (v - 10)));
				buf.b += Std.string(x1);
			}
		}
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g2 = 0;
			var _g11 = w - l;
			while(_g2 < _g11) {
				var i1 = _g2++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(w > k) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0 && p == 1) {
				var _g3 = 0;
				var _g12 = w - k;
				while(_g3 < _g12) {
					var i2 = _g3++;
					buf.b += "0";
				}
			} else {
				var _g4 = 0;
				var _g13 = w - k;
				while(_g4 < _g13) {
					var i3 = _g4++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index) != 0) {
				buf.b += "0X";
			} else {
				buf.b += "0x";
			}
		}
		if(p > l) {
			var _g5 = 0;
			var _g14 = p - l;
			while(_g5 < _g14) {
				var i4 = _g5++;
				buf.b += "0";
			}
		}
		var a1 = (f & 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index) != 0 ? 65 : 97;
		while(--m > -1) {
			var v1 = tmp[m];
			if(v1 < 10) {
				var x2 = String.fromCodePoint((48 + v1));
				buf.b += Std.string(x2);
			} else {
				var x3 = String.fromCodePoint((a1 + (v1 - 10)));
				buf.b += Std.string(x3);
			}
		}
	}
};
polygonal_ds_Printf.formatSignedDecimal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if(p == 0 && value == 0) {
		return;
	}
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	var s = Std.string(value < 0 ? -value : value);
	var l = s.length;
	var sign = value < 0 ? "-" : (f & 1 << polygonal_ds__$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : (f & 1 << polygonal_ds__$Printf_FormatFlag.Space._hx_index) != 0 ? " " : null;
	var hasSign = sign != null;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
		if(p > l) {
			l = p;
		}
		l += hasSign ? 1 : 0;
		if(w > l) {
			var _g2 = 0;
			var _g11 = w - l;
			while(_g2 < _g11) {
				var i1 = _g2++;
				buf.b += " ";
			}
		}
	} else {
		var k = l + (hasSign ? 1 : 0);
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
				if(hasSign) {
					buf.b += sign == null ? "null" : "" + sign;
				}
				var _g3 = 0;
				var _g12 = w - k;
				while(_g3 < _g12) {
					var i2 = _g3++;
					buf.b += "0";
				}
			} else {
				var _g4 = 0;
				var _g13 = w - k;
				while(_g4 < _g13) {
					var i3 = _g4++;
					buf.b += " ";
				}
			}
		}
		if(hasSign && (f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) == 0) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		if(p > l) {
			var _g5 = 0;
			var _g14 = p - l;
			while(_g5 < _g14) {
				var i4 = _g5++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
	}
};
polygonal_ds_Printf.formatUnsignedDecimal = function(value,args,buf) {
	if(value >= 0) {
		polygonal_ds_Printf.formatSignedDecimal(value,args,buf);
		return;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,value);
	var s = haxe__$Int64_Int64_$Impl_$.toString(this1);
	var l = s.length;
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g2 = 0;
			var _g11 = w - l;
			while(_g2 < _g11) {
				var i1 = _g2++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
				var _g3 = 0;
				var _g12 = w - k;
				while(_g3 < _g12) {
					var i2 = _g3++;
					buf.b += "0";
				}
			} else {
				var _g4 = 0;
				var _g13 = w - k;
				while(_g4 < _g13) {
					var i3 = _g4++;
					buf.b += " ";
				}
			}
		}
		if(p > l) {
			var _g5 = 0;
			var _g14 = p - l;
			while(_g5 < _g14) {
				var i4 = _g5++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
	}
};
polygonal_ds_Printf.formatNaturalFloat = function(value,args,buf) {
	var tmp = new StringBuf();
	polygonal_ds_Printf.formatFloat(value,args,tmp);
	var formatedFloat = tmp.b;
	console.log("polygonal/ds/Printf.hx:674:","formatedFloat " + formatedFloat);
	tmp = new StringBuf();
	polygonal_ds_Printf.formatScientific(value,args,tmp);
	var formatedScientific = tmp.b;
	console.log("polygonal/ds/Printf.hx:680:","formatedScientific " + formatedScientific);
	var s = formatedFloat.length <= formatedScientific.length ? formatedFloat : formatedScientific;
	buf.b += s == null ? "null" : "" + s;
};
polygonal_ds_Printf.formatScientific = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = polygonal_ds_Printf.DEFAULT_PRECISION;
	}
	var sign;
	var exponent;
	var s = "";
	if(value == 0) {
		sign = 0;
		exponent = 0;
		s += "0";
		if(p > 0) {
			s += ".";
			var _g = 0;
			var _g1 = p;
			while(_g < _g1) {
				var i = _g++;
				s += "0";
			}
		}
	} else {
		var m = Math;
		sign = value > 0. ? 1 : value < 0. ? -1 : 0;
		value = m.abs(value);
		exponent = m.floor(Math.log(value) / 2.302585092994046);
		value /= m.pow(10,exponent);
		var y = m.pow(0.1,p);
		value = Math.round(value / y) * y;
	}
	if(value != 0) {
		s += HxOverrides.substr(value == null ? "null" : "" + value,0,p + 2);
	}
	s += (f & 1 << polygonal_ds__$Printf_FormatFlag.UpperCase._hx_index) != 0 ? "E" : "e";
	s += exponent >= 0 ? "+" : "-";
	var s1 = Std.string(exponent < 0 ? -exponent : exponent);
	var c = polygonal_ds_Printf.DEFAULT_NUM_EXP_DIGITS - s1.length;
	var s2;
	if(c < 1) {
		s2 = s1;
	} else {
		var t;
		if(c > 30) {
			var $char = "0";
			t = $char;
			var _g2 = 0;
			var _g11 = c - 1;
			while(_g2 < _g11) {
				var i1 = _g2++;
				t += $char;
			}
		} else {
			t = polygonal_ds_Printf._padChars[c];
		}
		s2 = t + s1;
	}
	s += s2;
	var printSign = sign == -1 || ((f & 1 << polygonal_ds__$Printf_FormatFlag.Plus._hx_index) != 0 || (f & 1 << polygonal_ds__$Printf_FormatFlag.Space._hx_index) != 0);
	if(printSign && (f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) == 0) {
		s = (sign == -1 ? "-" : (f & 1 << polygonal_ds__$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : " ") + s;
	}
	if(args.width > 0) {
		var w = args.width;
		if(printSign && (f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
			--w;
		}
		var type = (f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0 ? 0 : 20;
		var c1 = w - s.length;
		if(c1 < 1) {
			s = s;
		} else {
			var t1;
			if(c1 > 30) {
				var char1 = type == 0 ? "0" : " ";
				t1 = char1;
				var _g3 = 0;
				var _g12 = c1 - 1;
				while(_g3 < _g12) {
					var i2 = _g3++;
					t1 += char1;
				}
			} else {
				t1 = polygonal_ds_Printf._padChars[type + c1];
			}
			s = t1 + s;
		}
	}
	if(printSign && (f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
		s = (sign == -1 ? "-" : (f & 1 << polygonal_ds__$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : " ") + s;
	}
	buf.b += s == null ? "null" : "" + s;
};
polygonal_ds_Printf.formatFloat = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = polygonal_ds_Printf.DEFAULT_PRECISION;
	}
	var w = args.width;
	var isNegative = value < 0;
	var s;
	if(p == 0) {
		s = Std.string(Math.round(value));
		if((f & 1 << polygonal_ds__$Printf_FormatFlag.Sharp._hx_index) != 0) {
			s += ".";
		}
	} else {
		s = value.toFixed(p);
	}
	var l = s.length;
	if(isNegative && s.indexOf("-") > -1) {
		s = HxOverrides.substr(s,1,null);
	}
	var sign = null;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.Plus._hx_index) != 0 && !isNegative) {
		sign = "+";
		++l;
	} else if((f & 1 << polygonal_ds__$Printf_FormatFlag.Space._hx_index) != 0) {
		sign = " ";
		++l;
	} else if(isNegative) {
		sign = "-";
	}
	var hasSign = sign != null;
	if((f & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		buf.b += s == null ? "null" : "" + s;
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		if(w > l) {
			if((f & 1 << polygonal_ds__$Printf_FormatFlag.Zero._hx_index) != 0) {
				if(hasSign) {
					buf.b += sign == null ? "null" : "" + sign;
					hasSign = false;
				}
				var _g2 = 0;
				var _g11 = w - l;
				while(_g2 < _g11) {
					var i1 = _g2++;
					buf.b += "0";
				}
			} else {
				var _g3 = 0;
				var _g12 = w - l;
				while(_g3 < _g12) {
					var i2 = _g3++;
					buf.b += " ";
				}
			}
		}
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		buf.b += s == null ? "null" : "" + s;
	}
};
polygonal_ds_Printf.formatCharacter = function(x,args,buf) {
	if((args.flags & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		var x1 = String.fromCodePoint(x);
		buf.b += Std.string(x1);
		var _g = 0;
		var _g1 = args.width - 1;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
	} else {
		var _g2 = 0;
		var _g11 = args.width - 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			buf.b += " ";
		}
		var x2 = String.fromCodePoint(x);
		buf.b += Std.string(x2);
	}
};
polygonal_ds_Printf.formatString = function(value,args,buf) {
	var l = value.length;
	var p = args.precision;
	if((args.flags & 1 << polygonal_ds__$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(p != -1) {
			buf.b += p == null ? HxOverrides.substr(value,0,null) : HxOverrides.substr(value,0,p);
			l = p;
		} else {
			buf.b += value == null ? "null" : "" + value;
		}
		var _g = 0;
		var _g1 = args.width - l;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
	} else {
		if(p != -1) {
			l = p;
		}
		var _g2 = 0;
		var _g11 = args.width - l;
		while(_g2 < _g11) {
			var i1 = _g2++;
			buf.b += " ";
		}
		if(p != -1) {
			buf.b += p == null ? HxOverrides.substr(value,0,null) : HxOverrides.substr(value,0,p);
		} else {
			buf.b += value == null ? "null" : "" + value;
		}
	}
};
polygonal_ds_Printf.pad = function(s,l,type,dir) {
	var c = l - s.length;
	if(c < 1) {
		return s;
	} else {
		var t;
		if(c > 30) {
			var $char = type == 0 ? "0" : " ";
			t = $char;
			var _g = 0;
			var _g1 = c - 1;
			while(_g < _g1) {
				var i = _g++;
				t += $char;
			}
		} else {
			t = polygonal_ds_Printf._padChars[type + c];
		}
		if(dir > 0) {
			return s + t;
		} else {
			return t + s;
		}
	}
};
polygonal_ds_Printf.roundTo = function(x,y) return Math.round(x / y) * y;
polygonal_ds_Printf.iabs = function(x) return x < 0 ? -x : x;
var polygonal_ds_PrintfError = function(message) {
	this.message = message;
};
polygonal_ds_PrintfError.__name__ = true;
polygonal_ds_PrintfError.prototype = {
	toString: function() {
		return this.message;
	}
	,__class__: polygonal_ds_PrintfError
};
var polygonal_ds__$Printf_FormatArgs = function(flags,pos,width,precision) {
	this.flags = flags;
	this.pos = pos;
	this.width = width;
	this.precision = precision;
};
polygonal_ds__$Printf_FormatArgs.__name__ = true;
polygonal_ds__$Printf_FormatArgs.prototype = {
	__class__: polygonal_ds__$Printf_FormatArgs
};
var polygonal_ds__$Printf_FormatFlag = $hxEnums["polygonal.ds._Printf.FormatFlag"] = { __ename__ : true, __constructs__ : ["Minus","Plus","Space","Sharp","Zero","LengthH","LengthUpperCaseL","LengthLowerCaseL","UpperCase"]
	,Minus: {_hx_index:0,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,Plus: {_hx_index:1,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,Space: {_hx_index:2,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,Sharp: {_hx_index:3,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,Zero: {_hx_index:4,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,LengthH: {_hx_index:5,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,LengthUpperCaseL: {_hx_index:6,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,LengthLowerCaseL: {_hx_index:7,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
	,UpperCase: {_hx_index:8,__enum__:"polygonal.ds._Printf.FormatFlag",toString:$estr}
};
var polygonal_ds__$Printf_FormatToken = $hxEnums["polygonal.ds._Printf.FormatToken"] = { __ename__ : true, __constructs__ : ["Raw","Tag","Property","Unknown"]
	,Raw: ($_=function(string) { return {_hx_index:0,string:string,__enum__:"polygonal.ds._Printf.FormatToken",toString:$estr}; },$_.__params__ = ["string"],$_)
	,Tag: ($_=function(type,args) { return {_hx_index:1,type:type,args:args,__enum__:"polygonal.ds._Printf.FormatToken",toString:$estr}; },$_.__params__ = ["type","args"],$_)
	,Property: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"polygonal.ds._Printf.FormatToken",toString:$estr}; },$_.__params__ = ["name"],$_)
	,Unknown: ($_=function(string,pos) { return {_hx_index:3,string:string,pos:pos,__enum__:"polygonal.ds._Printf.FormatToken",toString:$estr}; },$_.__params__ = ["string","pos"],$_)
};
var polygonal_ds__$Printf_FormatDataType = $hxEnums["polygonal.ds._Printf.FormatDataType"] = { __ename__ : true, __constructs__ : ["FmtInt","FmtFloat","FmtString","FmtPointer","FmtNothing"]
	,FmtInt: ($_=function(type) { return {_hx_index:0,type:type,__enum__:"polygonal.ds._Printf.FormatDataType",toString:$estr}; },$_.__params__ = ["type"],$_)
	,FmtFloat: ($_=function(floatType) { return {_hx_index:1,floatType:floatType,__enum__:"polygonal.ds._Printf.FormatDataType",toString:$estr}; },$_.__params__ = ["floatType"],$_)
	,FmtString: {_hx_index:2,__enum__:"polygonal.ds._Printf.FormatDataType",toString:$estr}
	,FmtPointer: {_hx_index:3,__enum__:"polygonal.ds._Printf.FormatDataType",toString:$estr}
	,FmtNothing: {_hx_index:4,__enum__:"polygonal.ds._Printf.FormatDataType",toString:$estr}
};
var polygonal_ds__$Printf_IntType = $hxEnums["polygonal.ds._Printf.IntType"] = { __ename__ : true, __constructs__ : ["ICharacter","ISignedDecimal","IUnsignedDecimal","IOctal","IHex","IBin"]
	,ICharacter: {_hx_index:0,__enum__:"polygonal.ds._Printf.IntType",toString:$estr}
	,ISignedDecimal: {_hx_index:1,__enum__:"polygonal.ds._Printf.IntType",toString:$estr}
	,IUnsignedDecimal: {_hx_index:2,__enum__:"polygonal.ds._Printf.IntType",toString:$estr}
	,IOctal: {_hx_index:3,__enum__:"polygonal.ds._Printf.IntType",toString:$estr}
	,IHex: {_hx_index:4,__enum__:"polygonal.ds._Printf.IntType",toString:$estr}
	,IBin: {_hx_index:5,__enum__:"polygonal.ds._Printf.IntType",toString:$estr}
};
var polygonal_ds__$Printf_FloatType = $hxEnums["polygonal.ds._Printf.FloatType"] = { __ename__ : true, __constructs__ : ["FNormal","FScientific","FNatural"]
	,FNormal: {_hx_index:0,__enum__:"polygonal.ds._Printf.FloatType",toString:$estr}
	,FScientific: {_hx_index:1,__enum__:"polygonal.ds._Printf.FloatType",toString:$estr}
	,FNatural: {_hx_index:2,__enum__:"polygonal.ds._Printf.FloatType",toString:$estr}
};
var polygonal_ds_tools_ArrayTools = function() { };
polygonal_ds_tools_ArrayTools.__name__ = true;
polygonal_ds_tools_ArrayTools.alloc = function(len) {
	var a = new Array(len);
	return a;
};
polygonal_ds_tools_ArrayTools.trim = function(a,len) {
	if(a.length > len) {
		a.length = len;
		return a;
	} else {
		return a;
	}
};
polygonal_ds_tools_ArrayTools.swap = function(array,a,b) {
	if(a != b) {
		var x = array[a];
		array[a] = array[b];
		array[b] = x;
	}
};
polygonal_ds_tools_ArrayTools.getFront = function(array,index) {
	if(index != 0) {
		var x = array[index];
		array[index] = array[0];
		array[0] = x;
	}
	return array[0];
};
polygonal_ds_tools_ArrayTools.init = function(a,val,first,n) {
	if(n == null) {
		n = 0;
	}
	if(first == null) {
		first = 0;
	}
	var min = first;
	var max = n <= 0 ? a.length : min + n;
	while(min < max) a[min++] = val;
	return a;
};
polygonal_ds_tools_ArrayTools.blit = function(src,srcPos,dst,dstPos,n) {
	if(n > 0) {
		if(src == dst) {
			if(srcPos < dstPos) {
				var i = srcPos + n;
				var j = dstPos + n;
				var _g = 0;
				var _g1 = n;
				while(_g < _g1) {
					var k = _g++;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > dstPos) {
				var i1 = srcPos;
				var j1 = dstPos;
				var _g2 = 0;
				var _g11 = n;
				while(_g2 < _g11) {
					var k1 = _g2++;
					src[j1] = src[i1];
					++i1;
					++j1;
				}
			}
		} else if(srcPos == 0 && dstPos == 0) {
			var _g3 = 0;
			var _g12 = n;
			while(_g3 < _g12) {
				var i2 = _g3++;
				dst[i2] = src[i2];
			}
		} else if(srcPos == 0) {
			var _g4 = 0;
			var _g13 = n;
			while(_g4 < _g13) {
				var i3 = _g4++;
				dst[dstPos + i3] = src[i3];
			}
		} else if(dstPos == 0) {
			var _g5 = 0;
			var _g14 = n;
			while(_g5 < _g14) {
				var i4 = _g5++;
				dst[i4] = src[srcPos + i4];
			}
		} else {
			var _g6 = 0;
			var _g15 = n;
			while(_g6 < _g15) {
				var i5 = _g6++;
				dst[dstPos + i5] = src[srcPos + i5];
			}
		}
	}
};
polygonal_ds_tools_ArrayTools.iter = function(src,f,n) {
	if(n == null) {
		n = 0;
	}
	if(n == 0) {
		n = src.length;
	}
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		f(src[i]);
	}
};
polygonal_ds_tools_ArrayTools.forEach = function(src,f) {
	var n = src.length;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		src[i] = f(src[i],i);
	}
};
polygonal_ds_tools_ArrayTools.binarySearchCmp = function(a,x,min,max,comparator) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(comparator(a[m],x) < 0) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && comparator(a[l],x) == 0) {
		return l;
	} else {
		return ~l;
	}
};
polygonal_ds_tools_ArrayTools.binarySearchf = function(a,x,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < x) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && a[l] == x) {
		return l;
	} else {
		return ~l;
	}
};
polygonal_ds_tools_ArrayTools.binarySearchi = function(a,x,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < x) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && a[l] == x) {
		return l;
	} else {
		return ~l;
	}
};
polygonal_ds_tools_ArrayTools.shuffle = function(a,rvals) {
	var s = a.length;
	if(rvals == null) {
		while(--s > 1) {
			var i = polygonal_ds_tools_Shuffle._f() * s | 0;
			var t = a[s];
			a[s] = a[i];
			a[i] = t;
		}
	} else {
		var j = 0;
		while(--s > 1) {
			var i1 = rvals[j++] * s | 0;
			var t1 = a[s];
			a[s] = a[i1];
			a[i1] = t1;
		}
	}
};
polygonal_ds_tools_ArrayTools.sortRange = function(a,cmp,useInsertionSort,first,n) {
	var k = a.length;
	if(k > 1) {
		if(useInsertionSort) {
			var _g = first + 1;
			var _g1 = first + n;
			while(_g < _g1) {
				var i = _g++;
				var x = a[i];
				var j = i;
				while(j > first) {
					var y = a[j - 1];
					if(cmp(y,x) > 0) {
						a[j] = y;
						--j;
					} else {
						break;
					}
				}
				a[j] = x;
			}
		} else {
			polygonal_ds_tools_ArrayTools._quickSort(a,first,n,cmp);
		}
	}
};
polygonal_ds_tools_ArrayTools.quickPerm = function(n) {
	var results = [];
	var a = [];
	var p = [];
	var j;
	var t;
	var i = 0;
	while(i < n) {
		a[i] = i + 1;
		p[i] = 0;
		++i;
	}
	results.push(a.slice());
	i = 1;
	while(i < n) if(p[i] < i) {
		j = i % 2 * p[i];
		t = a[j];
		a[j] = a[i];
		a[i] = t;
		results.push(a.slice());
		p[i]++;
		i = 1;
	} else {
		p[i] = 0;
		++i;
	}
	return results;
};
polygonal_ds_tools_ArrayTools.equals = function(a,b,eq) {
	var success = true;
	if(a.length == b.length) {
		var i = 0;
		var k = a.length;
		while(i < k) {
			if(!eq(a[i],b[i])) {
				success = false;
				break;
			}
			++i;
		}
	}
	return success;
};
polygonal_ds_tools_ArrayTools.split = function(a,n,k) {
	var out = [];
	var b = null;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		if(i % k == 0) {
			b = [];
			out[i / k | 0] = b;
		}
		b.push(a[i]);
	}
	return out;
};
polygonal_ds_tools_ArrayTools.pairwise = function(input,visit) {
	var i = 0;
	var k = input.length;
	while(i < k) {
		visit(i,input[i],input[i + 1]);
		i += 2;
	}
};
polygonal_ds_tools_ArrayTools.bruteforce = function(input,visit) {
	var i = 0;
	var j;
	var k = input.length;
	var l = k - 1;
	while(i < l) {
		j = i + 1;
		while(j < k) {
			visit(input[i],input[j]);
			++j;
		}
		++i;
	}
};
polygonal_ds_tools_ArrayTools._quickSort = function(a,first,n,cmp) {
	var last = first + n - 1;
	var lo = first;
	var hi = last;
	if(n > 1) {
		var i0 = first;
		var i1 = i0 + (n >> 1);
		var i2 = i0 + n - 1;
		var t0 = a[i0];
		var t1 = a[i1];
		var t2 = a[i2];
		var mid;
		var t = cmp(t0,t2);
		if(t < 0 && cmp(t0,t1) < 0) {
			mid = cmp(t1,t2) < 0 ? i1 : i2;
		} else if(cmp(t1,t0) < 0 && cmp(t1,t2) < 0) {
			mid = t < 0 ? i0 : i2;
		} else {
			mid = cmp(t2,t0) < 0 ? i1 : i0;
		}
		var pivot = a[mid];
		a[mid] = a[first];
		while(lo < hi) {
			while(cmp(pivot,a[hi]) < 0 && lo < hi) --hi;
			if(hi != lo) {
				a[lo] = a[hi];
				++lo;
			}
			while(cmp(pivot,a[lo]) > 0 && lo < hi) ++lo;
			if(hi != lo) {
				a[hi] = a[lo];
				--hi;
			}
		}
		a[lo] = pivot;
		polygonal_ds_tools_ArrayTools._quickSort(a,first,lo - first,cmp);
		polygonal_ds_tools_ArrayTools._quickSort(a,lo + 1,last - lo,cmp);
	}
};
var polygonal_ds_tools_Assert = function() { };
polygonal_ds_tools_Assert.__name__ = true;
var polygonal_ds_tools_Shuffle = function() { };
polygonal_ds_tools_Shuffle.__name__ = true;
polygonal_ds_tools_Shuffle._f = function() {
	return Math.random();
};
polygonal_ds_tools_Shuffle.setRandom = function(f) {
	polygonal_ds_tools_Shuffle._f = f;
};
polygonal_ds_tools_Shuffle.frand = function() {
	return polygonal_ds_tools_Shuffle._f();
};
var robotModel_Environment = $hxEnums["robotModel.Environment"] = { __ename__ : true, __constructs__ : ["Real","Simulator"]
	,Real: {_hx_index:0,__enum__:"robotModel.Environment",toString:$estr}
	,Simulator: {_hx_index:1,__enum__:"robotModel.Environment",toString:$estr}
};
var science_ScientificTools = function() { };
science_ScientificTools.__name__ = true;
science_ScientificTools.maximum = function(values) {
	var res = values[0];
	var _g = 1;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > res) {
			res = values[i];
		}
	}
	return res;
};
science_ScientificTools.quickSelect = function(values,index) {
	if(values.length == 1) {
		if(index != 0) {
			throw new js__$Boot_HaxeError(new exceptions_IndexException("index of selection is out of range"));
		}
		return values[0];
	}
	var pivot = Std.random(Math.ceil(science_ScientificTools.maximum(values)));
	var _g = [];
	var _g1 = 0;
	while(_g1 < values.length) {
		var i = values[_g1];
		++_g1;
		if(i < pivot) {
			_g.push(i);
		}
	}
	var lows = _g;
	var _g2 = [];
	var _g3 = 0;
	while(_g3 < values.length) {
		var i1 = values[_g3];
		++_g3;
		if(i1 > pivot) {
			_g2.push(i1);
		}
	}
	var highs = _g2;
	var _g4 = [];
	var _g5 = 0;
	while(_g5 < values.length) {
		var i2 = values[_g5];
		++_g5;
		if(js_Boot.__cast(i2 , Int) == pivot) {
			_g4.push(i2);
		}
	}
	var pivots = _g4;
	if(index < lows.length) {
		return science_ScientificTools.quickSelect(lows,index);
	}
	if(index < lows.length + pivots.length) {
		return pivots[0];
	}
	return science_ScientificTools.quickSelect(highs,index - lows.length - pivots.length);
};
science_ScientificTools.median1d = function(values) {
	if(values.length % 2 == 1) {
		return science_ScientificTools.quickSelect(values,Math.ceil(values.length / 2) - 1);
	}
	return 0.5 * (science_ScientificTools.quickSelect(values,js_Boot.__cast(values.length / 2 , Int) - 1) + science_ScientificTools.quickSelect(values,js_Boot.__cast(values.length / 2 , Int)));
};
science_ScientificTools.median2d = function(values) {
	return science_ScientificTools.median1d(science_matrix_MatrixTools.flatten(values));
};
science_ScientificTools.interpolateF = function(x,x1,y1,x2,y2) {
	return y1 + (y2 - y1) / (x2 - x1) * (x - x1);
};
science_ScientificTools.interpolate1d = function(xs,ys,fillValues) {
	if(fillValues == null) {
		fillValues = false;
	}
	if(xs.length != ys.length) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("arrays xs and ys must be of the same length, but length of array xs is " + xs.length + " and length of array ys is " + ys.length));
	}
	if(xs.length < 2) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("cant interpolate over array of length 1"));
	}
	xs.sort(Reflect.compare);
	ys.sort(Reflect.compare);
	return function(x) {
		if(x < xs[0] || x > xs[xs.length - 1]) {
			if(!fillValues) {
				throw new js__$Boot_HaxeError(new exceptions_ValueException("x value (" + Std.string(x) + ") is out of the interpolation range"));
			} else if(x < xs[0]) {
				return science_ScientificTools.interpolateF(x,xs[1],ys[1],xs[0],ys[0]);
			} else {
				return science_ScientificTools.interpolateF(x,xs[xs.length - 2],ys[ys.length - 2],xs[xs.length - 1],ys[ys.length - 1]);
			}
		}
		var x1 = -1;
		var x2 = -1;
		var _g = 0;
		var _g1 = xs.length;
		while(_g < _g1) {
			var i = _g++;
			if(xs[i] == x) {
				return ys[i];
			} else if(xs[i] > x && i != 0) {
				x1 = i - 1;
				x2 = i;
				break;
			}
		}
		if(x1 == -1) {
			throw new js__$Boot_HaxeError(new exceptions_ValueException("couldnt interpolate for the given x: " + Std.string(x)));
		}
		return science_ScientificTools.interpolateF(x,xs[x1],ys[x1],xs[x2],ys[x2]);
	};
};
science_ScientificTools.derivative = function(func,x,dx) {
	var x1 = x - dx;
	var x2 = x + dx;
	var y1 = func(x1);
	var y2 = func(x2);
	return (y2 - y1) / (x2 - x1);
};
science_ScientificTools.round = function(value,precision) {
	if(precision == null) {
		precision = 0;
	}
	return Math.round(value * Math.pow(10,precision)) / Math.pow(10,precision);
};
science_ScientificTools.getWindow = function(values,startIndex,windowSize) {
	if(startIndex < 0 || startIndex >= values.length) {
		throw new js__$Boot_HaxeError(new exceptions_IndexException("invalid index was passed to the getWindow function"));
	}
	if(values.length < windowSize) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("length of the given array is less than windowSize"));
	}
	if(startIndex < 0) {
		startIndex += values.length;
	}
	return values.slice(startIndex,startIndex + windowSize).concat(startIndex + windowSize >= values.length ? values.slice(0,windowSize - values.length + startIndex) : []);
};
science_ScientificTools.slice_ = function(a,start,end,step) {
	if(step == null) {
		step = 1;
	}
	if(start == null) {
		start = 0;
	}
	var _this = ds__$Range_Range_$Impl_$._new(start < 0 ? a.length + start : start,end < 0 ? a.length + end : tools_NullTools.coalesce(end,a.length),step);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = a[_this[i]];
	}
	return result;
};
science_ScientificTools.sum = function(a) {
	var res = a[0];
	var _g = 0;
	var _g1 = science_ScientificTools.slice_(a,1);
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		res += i;
	}
	return res;
};
var science_geometry_Line = function(point1,point2) {
	if(Math.abs(science_geometry__$Point_Point_$Impl_$.get_x(point1) - science_geometry__$Point_Point_$Impl_$.get_x(point2)) <= 1e-6 && Math.abs(science_geometry__$Point_Point_$Impl_$.get_y(point1) - science_geometry__$Point_Point_$Impl_$.get_y(point2)) <= 1e-6) {
		throw new js__$Boot_HaxeError(new science_geometry_exceptions_SamePointException("cant define a line with two same points"));
	}
	this.point1 = science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(point1),science_geometry__$Point_Point_$Impl_$.get_y(point1));
	this.point2 = science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(point2),science_geometry__$Point_Point_$Impl_$.get_y(point2));
	this.a = science_geometry__$Point_Point_$Impl_$.get_y(point1) - science_geometry__$Point_Point_$Impl_$.get_y(point2);
	this.b = science_geometry__$Point_Point_$Impl_$.get_x(point2) - science_geometry__$Point_Point_$Impl_$.get_x(point1);
	this.c = -this.a * science_geometry__$Point_Point_$Impl_$.get_x(point1) - this.b * science_geometry__$Point_Point_$Impl_$.get_y(point1);
};
science_geometry_Line.__name__ = true;
science_geometry_Line.prototype = {
	moveX: function(value) {
		var delta = science_geometry__$Point_Point_$Impl_$._new(value,0);
		return new science_geometry_Line(science_geometry__$Point_Point_$Impl_$.add(this.point1,delta),science_geometry__$Point_Point_$Impl_$.add(this.point2,delta));
	}
	,moveY: function(value) {
		var delta = science_geometry__$Point_Point_$Impl_$._new(0,value);
		return new science_geometry_Line(science_geometry__$Point_Point_$Impl_$.add(this.point1,delta),science_geometry__$Point_Point_$Impl_$.add(this.point2,delta));
	}
	,moveXY: function(valueX,valueY) {
		var delta = science_geometry__$Point_Point_$Impl_$._new(valueX,valueY);
		return new science_geometry_Line(science_geometry__$Point_Point_$Impl_$.add(this.point1,delta),science_geometry__$Point_Point_$Impl_$.add(this.point2,delta));
	}
	,getX: function(y) {
		return -(this.c + this.b * y) / this.a;
	}
	,getY: function(x) {
		return -(this.a * x + this.c) / this.b;
	}
	,getPointX: function(x) {
		return science_geometry__$Point_Point_$Impl_$._new(x,this.getY(x));
	}
	,getPointY: function(y) {
		return science_geometry__$Point_Point_$Impl_$._new(this.getX(y),y);
	}
	,toString: function() {
		return "Line(" + this.a + ", " + this.b + ", " + this.c + ")";
	}
	,__class__: science_geometry_Line
};
var science_geometry__$Point_Point_$Impl_$ = {};
science_geometry__$Point_Point_$Impl_$.__name__ = true;
science_geometry__$Point_Point_$Impl_$.get_x = function(this1) {
	return this1.first;
};
science_geometry__$Point_Point_$Impl_$.set_x = function(this1,value) {
	return this1.first = value;
};
science_geometry__$Point_Point_$Impl_$.get_y = function(this1) {
	return this1.second;
};
science_geometry__$Point_Point_$Impl_$.set_y = function(this1,value) {
	return this1.second = value;
};
science_geometry__$Point_Point_$Impl_$._new = function(x,y) {
	var this1 = new ds_Pair(x,y);
	return this1;
};
science_geometry__$Point_Point_$Impl_$.round = function(this1) {
	return science_geometry__$Point_Point_$Impl_$._new(Math.round(science_geometry__$Point_Point_$Impl_$.get_x(this1)),Math.round(science_geometry__$Point_Point_$Impl_$.get_y(this1)));
};
science_geometry__$Point_Point_$Impl_$.add = function(this1,p) {
	return science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) + science_geometry__$Point_Point_$Impl_$.get_x(p),science_geometry__$Point_Point_$Impl_$.get_y(this1) + science_geometry__$Point_Point_$Impl_$.get_y(p));
};
science_geometry__$Point_Point_$Impl_$.neg = function(this1) {
	return science_geometry__$Point_Point_$Impl_$._new(-science_geometry__$Point_Point_$Impl_$.get_x(this1),-science_geometry__$Point_Point_$Impl_$.get_y(this1));
};
science_geometry__$Point_Point_$Impl_$.sub = function(this1,p) {
	return science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) - science_geometry__$Point_Point_$Impl_$.get_x(p),science_geometry__$Point_Point_$Impl_$.get_y(this1) - science_geometry__$Point_Point_$Impl_$.get_y(p));
};
science_geometry__$Point_Point_$Impl_$.mul = function(this1,k) {
	return science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) * k,science_geometry__$Point_Point_$Impl_$.get_y(this1) * k);
};
science_geometry__$Point_Point_$Impl_$.div = function(this1,k) {
	return science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) / k,science_geometry__$Point_Point_$Impl_$.get_y(this1) / k);
};
science_geometry__$Point_Point_$Impl_$.toString = function(this1) {
	return "Point(" + Std.string(this1.first) + ", " + Std.string(this1.second) + ")";
};
var science_geometry__$Point3D_Point3D_$Impl_$ = {};
science_geometry__$Point3D_Point3D_$Impl_$.__name__ = true;
science_geometry__$Point3D_Point3D_$Impl_$.get_x = function(this1) {
	return this1[0];
};
science_geometry__$Point3D_Point3D_$Impl_$.set_x = function(this1,value) {
	return this1[0] = value;
};
science_geometry__$Point3D_Point3D_$Impl_$.get_y = function(this1) {
	return this1[1];
};
science_geometry__$Point3D_Point3D_$Impl_$.set_y = function(this1,value) {
	return this1[1] = value;
};
science_geometry__$Point3D_Point3D_$Impl_$.get_z = function(this1) {
	return this1[2];
};
science_geometry__$Point3D_Point3D_$Impl_$.set_z = function(this1,value) {
	return this1[2] = value;
};
science_geometry__$Point3D_Point3D_$Impl_$._new = function(x,y,z) {
	var this1 = [x,y,z];
	return this1;
};
science_geometry__$Point3D_Point3D_$Impl_$.distTo = function(this1,point) {
	return Math.sqrt(Math.pow(science_geometry__$Point3D_Point3D_$Impl_$.get_x(point) - science_geometry__$Point3D_Point3D_$Impl_$.get_x(this1),2) + Math.pow(science_geometry__$Point3D_Point3D_$Impl_$.get_y(point) - science_geometry__$Point3D_Point3D_$Impl_$.get_y(this1),2) + Math.pow(science_geometry__$Point3D_Point3D_$Impl_$.get_z(point) - science_geometry__$Point3D_Point3D_$Impl_$.get_z(this1),2));
};
science_geometry__$Point3D_Point3D_$Impl_$.fromPoint = function(p) {
	return science_geometry__$Point3D_Point3D_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(p),science_geometry__$Point_Point_$Impl_$.get_y(p),science_geometry__$Point_Point_$Impl_$.get_x(p) * 0);
};
science_geometry__$Point3D_Point3D_$Impl_$.toPoint = function(this1) {
	return science_geometry__$Point_Point_$Impl_$._new(science_geometry__$Point3D_Point3D_$Impl_$.get_x(this1),science_geometry__$Point3D_Point3D_$Impl_$.get_y(this1));
};
science_geometry__$Point3D_Point3D_$Impl_$.toString = function(this1) {
	return "Point3d(" + Std.string(science_geometry__$Point3D_Point3D_$Impl_$.get_x(this1)) + ", " + Std.string(science_geometry__$Point3D_Point3D_$Impl_$.get_y(this1)) + ", " + Std.string(science_geometry__$Point3D_Point3D_$Impl_$.get_z(this1)) + ")";
};
var science_geometry__$Vector_Vector_$Impl_$ = {};
science_geometry__$Vector_Vector_$Impl_$.__name__ = true;
science_geometry__$Vector_Vector_$Impl_$._new = function(x,y) {
	var this1 = science_geometry__$Point_Point_$Impl_$._new(x,y);
	return this1;
};
science_geometry__$Vector_Vector_$Impl_$.add = function(this1,p) {
	return science_geometry__$Vector_Vector_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) + science_geometry__$Point_Point_$Impl_$.get_x(p),science_geometry__$Point_Point_$Impl_$.get_y(this1) + science_geometry__$Point_Point_$Impl_$.get_y(p));
};
science_geometry__$Vector_Vector_$Impl_$.neg = function(this1) {
	return science_geometry__$Vector_Vector_$Impl_$._new(-science_geometry__$Point_Point_$Impl_$.get_x(this1),-science_geometry__$Point_Point_$Impl_$.get_y(this1));
};
science_geometry__$Vector_Vector_$Impl_$.sub = function(this1,p) {
	return science_geometry__$Vector_Vector_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) - science_geometry__$Point_Point_$Impl_$.get_x(p),science_geometry__$Point_Point_$Impl_$.get_y(this1) - science_geometry__$Point_Point_$Impl_$.get_y(p));
};
science_geometry__$Vector_Vector_$Impl_$.mul = function(this1,k) {
	return science_geometry__$Vector_Vector_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) * k,science_geometry__$Point_Point_$Impl_$.get_y(this1) * k);
};
science_geometry__$Vector_Vector_$Impl_$.div = function(this1,k) {
	return science_geometry__$Vector_Vector_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(this1) / k,science_geometry__$Point_Point_$Impl_$.get_y(this1) / k);
};
science_geometry__$Vector_Vector_$Impl_$.scalar_product = function(this1,point) {
	return science_geometry__$Point_Point_$Impl_$.get_x(this1) * science_geometry__$Point_Point_$Impl_$.get_x(point) + science_geometry__$Point_Point_$Impl_$.get_y(this1) * science_geometry__$Point_Point_$Impl_$.get_y(point);
};
science_geometry__$Vector_Vector_$Impl_$.vector_product = function(this1,point) {
	return science_geometry__$Point_Point_$Impl_$.get_x(this1) * science_geometry__$Point_Point_$Impl_$.get_y(point) - science_geometry__$Point_Point_$Impl_$.get_y(this1) * science_geometry__$Point_Point_$Impl_$.get_x(point);
};
science_geometry__$Vector_Vector_$Impl_$.$length = function(this1) {
	return science_geometry__$Vector_Vector_$Impl_$.scalar_product(this1,this1);
};
var science_geometry_exceptions_SamePointException = function(errorMessage) {
	exceptions_BaseException.call(this,errorMessage);
};
science_geometry_exceptions_SamePointException.__name__ = true;
science_geometry_exceptions_SamePointException.__super__ = exceptions_BaseException;
science_geometry_exceptions_SamePointException.prototype = $extend(exceptions_BaseException.prototype,{
	toString: function() {
		return "SamePointException(" + this.errorMessage + ")";
	}
	,__class__: science_geometry_exceptions_SamePointException
});
var science_matrix__$Matrix_Matrix_$Impl_$ = {};
science_matrix__$Matrix_Matrix_$Impl_$.__name__ = true;
science_matrix__$Matrix_Matrix_$Impl_$.get_width = function(this1) {
	if(science_matrix__$Matrix_Matrix_$Impl_$.get_height(this1) == 0) {
		return 0;
	}
	return this1[0].length;
};
science_matrix__$Matrix_Matrix_$Impl_$.get_height = function(this1) {
	return this1.length;
};
science_matrix__$Matrix_Matrix_$Impl_$._new = function(a) {
	var this1 = tools_NullTools.coalesce(a,[]);
	return this1;
};
science_matrix__$Matrix_Matrix_$Impl_$.getIndex = function(this1,i) {
	return this1[i];
};
science_matrix__$Matrix_Matrix_$Impl_$.setIndex = function(this1,i,value) {
	return this1[i] = value;
};
var science_matrix_MatrixTools = function() { };
science_matrix_MatrixTools.__name__ = true;
science_matrix_MatrixTools.rotateRight = function(m) {
	var res = science_matrix__$Matrix_Matrix_$Impl_$._new();
	var _g = 0;
	var _g1 = ds__$Range_Range_$Impl_$._new(m[0].length - 1,-1);
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		var tmp = [];
		var _g11 = 0;
		var _g2 = m.length;
		while(_g11 < _g2) {
			var j = _g11++;
			tmp.push(m[j][i]);
		}
		res.push(tmp);
	}
	return res;
};
science_matrix_MatrixTools.rotateLeft = function(m) {
	var res = science_matrix__$Matrix_Matrix_$Impl_$._new();
	var _g = 0;
	var _g1 = m[0].length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = [];
		var _g2 = 0;
		var _g11 = ds__$Range_Range_$Impl_$._new(m.length - 1,-1);
		while(_g2 < _g11.length) {
			var j = _g11[_g2];
			++_g2;
			tmp.push(m[j][i]);
		}
		res.push(tmp);
	}
	return res;
};
science_matrix_MatrixTools.submatrix = function(m,x0,y0,x1,y1) {
	var _this = science_ScientificTools.slice_(m,y0,y1);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = science_ScientificTools.slice_(_this[i],x0,x1);
	}
	return result;
};
science_matrix_MatrixTools.flatten = function(m) {
	var res = [];
	var _g = 0;
	var _g1 = m;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		res = res.concat(i);
	}
	return res;
};
var time_Time = $hxEnums["time.Time"] = { __ename__ : true, __constructs__ : ["Milliseconds","Seconds","Minutes"]
	,Milliseconds: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"time.Time",toString:$estr}; },$_.__params__ = ["value"],$_)
	,Seconds: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"time.Time",toString:$estr}; },$_.__params__ = ["value"],$_)
	,Minutes: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"time.Time",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var tools_ColorTools = function() { };
tools_ColorTools.__name__ = true;
tools_ColorTools.toRGB = function(color1) {
	return new color_RGBColor(color1.get_r(),color1.get_g(),color1.get_b());
};
tools_ColorTools.toHSV = function(color1) {
	var fR = color1.get_r() / 255;
	var fG = color1.get_g() / 255;
	var fB = color1.get_b() / 255;
	var minRGB = Math.min(fR,Math.min(fG,fB));
	var maxRGB = Math.max(fR,Math.max(fG,fB));
	if(minRGB == maxRGB) {
		return new color_HSVColor(0,0,minRGB);
	}
	var d = fR == minRGB ? fG - fB : fB == minRGB ? fR - fG : fB - fR;
	var h = fR == minRGB ? 3 : fB == minRGB ? 1 : 5;
	return new color_HSVColor(60 * (h - d / (maxRGB - minRGB)),(maxRGB - minRGB) / maxRGB,maxRGB);
};
tools_ColorTools.toMono = function(color1) {
	return new color_MonoColor(Math.floor((color1.get_r() + color1.get_g() + color1.get_b()) / 3));
};
tools_ColorTools.toPoint3D = function(color) {
	return science_geometry__$Point3D_Point3D_$Impl_$._new(color.get_r(),color.get_g(),color.get_b());
};
tools_ColorTools.compareMono = function(color1,color2,threshold) {
	if(threshold == null) {
		threshold = 0;
	}
	if(color1.value < color2.value) {
		return ds_Ordering.LT;
	}
	if(color1.value > color2.value) {
		return ds_Ordering.GT;
	}
	return ds_Ordering.EQ;
};
tools_ColorTools.compare = function(color1,color2,threshold) {
	if(threshold == null) {
		threshold = 0;
	}
	var color1Rgb = tools_ColorTools.toRGB(color1);
	var color2Rgb = tools_ColorTools.toRGB(color2);
	if(Math.abs(color1Rgb.get_r() - color2Rgb.get_r()) <= threshold && Math.abs(color1Rgb.get_g() - color2Rgb.get_g()) <= threshold) {
		return Math.abs(color1Rgb.get_b() - color2Rgb.get_b()) <= threshold;
	} else {
		return false;
	}
};
var tools_GeometryTools = function() { };
tools_GeometryTools.__name__ = true;
tools_GeometryTools.distToLine = function(p,line) {
	var d = tools_GeometryTools.distTo(line.point1,line.point2);
	var vector = p;
	var s = science_geometry__$Vector_Vector_$Impl_$.vector_product(science_geometry__$Vector_Vector_$Impl_$.sub(vector,line.point1),science_geometry__$Vector_Vector_$Impl_$.sub(vector,line.point2));
	return Math.abs(s) / d;
};
tools_GeometryTools.det = function(a,b,c,d) {
	return a * d - b * c;
};
tools_GeometryTools.paralell = function(line1,line2) {
	return Math.abs(tools_GeometryTools.det(line1.a,line1.b,line2.a,line2.b)) <= tools_GeometryTools.epsilon;
};
tools_GeometryTools.equivalent = function(line1,line2) {
	if(Math.abs(tools_GeometryTools.det(line1.a,line1.b,line2.a,line2.b)) < tools_GeometryTools.epsilon && Math.abs(tools_GeometryTools.det(line1.a,line1.c,line2.a,line2.c)) < tools_GeometryTools.epsilon) {
		return Math.abs(tools_GeometryTools.det(line1.b,line1.c,line2.b,line2.c)) < tools_GeometryTools.epsilon;
	} else {
		return false;
	}
};
tools_GeometryTools.getIntersectionPoint = function(line1,line2) {
	if(tools_GeometryTools.paralell(line1,line2) || tools_GeometryTools.equivalent(line1,line2)) {
		return null;
	}
	var d = tools_GeometryTools.det(line1.a,line1.b,line2.a,line2.b);
	return science_geometry__$Point_Point_$Impl_$._new(-tools_GeometryTools.det(line1.c,line1.b,line2.c,line2.b) / d,-tools_GeometryTools.det(line1.a,line1.c,line2.a,line2.c) / d);
};
tools_GeometryTools.distTo = function(p1,p2) {
	return Math.sqrt(Math.pow(science_geometry__$Point_Point_$Impl_$.get_x(p1) - science_geometry__$Point_Point_$Impl_$.get_x(p2),2) + Math.pow(science_geometry__$Point_Point_$Impl_$.get_y(p1) - science_geometry__$Point_Point_$Impl_$.get_y(p2),2));
};
var tools_ImageTools = function() { };
tools_ImageTools.__name__ = true;
tools_ImageTools.toGreyscale = function(image1) {
	var _g = [];
	var i = HxOverrides.iter(image1);
	while(i.hasNext()) {
		var i1 = i.next();
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < i1.length) {
			var j = i1[_g3];
			++_g3;
			_g2.push(tools_ColorTools.toMono(j));
		}
		_g.push(_g2);
	}
	return image__$Image_Image_$Impl_$._new(_g);
};
tools_ImageTools.findDarkestColor = function(image) {
	var darkestColor = image[0][0];
	var i = HxOverrides.iter(image);
	while(i.hasNext()) {
		var i1 = i.next();
		var _g1 = 0;
		while(_g1 < i1.length) {
			var j = i1[_g1];
			++_g1;
			if(tools_ColorTools.compareMono(tools_ColorTools.toMono(j),tools_ColorTools.toMono(darkestColor)) == ds_Ordering.LT) {
				darkestColor = j;
			}
		}
	}
	return darkestColor;
};
tools_ImageTools.toBinary = function(image1,threshold) {
	if(threshold == null) {
		threshold = 20;
	}
	var darkestColor = tools_ImageTools.findDarkestColor(image1);
	var _g = [];
	var i = HxOverrides.iter(image1);
	while(i.hasNext()) {
		var i1 = i.next();
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < i1.length) {
			var j = i1[_g3];
			++_g3;
			_g2.push(Math.abs(tools_ColorTools.toMono(j).value - tools_ColorTools.toMono(darkestColor).value) <= threshold ? new color_BinaryColor(true) : new color_BinaryColor(false));
		}
		_g.push(_g2);
	}
	return image__$Image_Image_$Impl_$._new(_g);
};
tools_ImageTools.cropSides = function(image1,sides) {
	var _this = image1.slice(sides.top,image1.length - sides.bottom);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var i1 = _this[i];
		result[i] = i1.slice(sides.left,i1.length - sides.right);
	}
	return image__$Image_Image_$Impl_$._new(result);
};
tools_ImageTools.cornersToSides = function(image,corners) {
	return { top : Math.round(Math.min(science_geometry__$Point_Point_$Impl_$.get_y(corners.leftTop),science_geometry__$Point_Point_$Impl_$.get_y(corners.rightTop))), left : Math.round(Math.min(science_geometry__$Point_Point_$Impl_$.get_x(corners.leftTop),science_geometry__$Point_Point_$Impl_$.get_x(corners.leftBottom))), right : image[0].length - Math.round(Math.max(science_geometry__$Point_Point_$Impl_$.get_x(corners.rightTop),science_geometry__$Point_Point_$Impl_$.get_x(corners.rightBottom))), bottom : image.length - Math.round(Math.max(science_geometry__$Point_Point_$Impl_$.get_y(corners.leftBottom),science_geometry__$Point_Point_$Impl_$.get_y(corners.rightBottom)))};
};
tools_ImageTools.cropCorners = function(image,corners) {
	return tools_ImageTools.cropSides(image,tools_ImageTools.cornersToSides(image,corners));
};
tools_ImageTools.findCorners = function(image1,color1) {
	var targetColor = tools_NullTools.coalesce(color1,new color_BinaryColor(true));
	var res = new image_Corners();
	var width = image1[0].length;
	var height = image1.length;
	var _g = 0;
	var _g1 = width;
	while(_g < _g1) {
		var k = _g++;
		var i = 0;
		var j = k;
		while(i < height && j >= 0) {
			if(tools_ColorTools.compare(image1[i][j],targetColor)) {
				res.leftTop = image__$Pixel_Pixel_$Impl_$._new(j,i,width,height);
				break;
			}
			++i;
			--j;
		}
		if(res.leftTop != null) {
			break;
		}
	}
	var _g2 = 0;
	var _g3 = ds__$Range_Range_$Impl_$._new(width - 1,-1);
	while(_g2 < _g3.length) {
		var k1 = _g3[_g2];
		++_g2;
		var i1 = 0;
		var j1 = k1;
		while(i1 < height && j1 < width) {
			if(tools_ColorTools.compare(image1[i1][j1],targetColor)) {
				res.rightTop = image__$Pixel_Pixel_$Impl_$._new(j1,i1,width,height);
				break;
			}
			++i1;
			++j1;
		}
		if(res.rightTop != null) {
			break;
		}
	}
	var _g4 = 0;
	var _g5 = ds__$Range_Range_$Impl_$._new(width - 1,-1);
	while(_g4 < _g5.length) {
		var k2 = _g5[_g4];
		++_g4;
		var i2 = height - 1;
		var j2 = k2;
		while(i2 >= 0 && j2 < width) {
			if(tools_ColorTools.compare(targetColor,image1[i2][j2])) {
				res.rightBottom = image__$Pixel_Pixel_$Impl_$._new(j2,i2,width,height);
				break;
			}
			--i2;
			++j2;
		}
		if(res.rightBottom != null) {
			break;
		}
	}
	var _g6 = 0;
	var _g7 = width;
	while(_g6 < _g7) {
		var k3 = _g6++;
		var i3 = height - 1;
		var j3 = k3;
		while(i3 >= 0 && j3 >= 0) {
			if(tools_ColorTools.compare(image1[i3][j3],targetColor)) {
				res.leftBottom = image__$Pixel_Pixel_$Impl_$._new(j3,i3,width,height);
				break;
			}
			--i3;
			--j3;
		}
		if(res.leftBottom != null) {
			break;
		}
	}
	return res;
};
tools_ImageTools.inverse = function(image1) {
	var _g = [];
	var i = HxOverrides.iter(image1);
	while(i.hasNext()) {
		var i1 = i.next();
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < i1.length) {
			var j = i1[_g3];
			++_g3;
			_g2.push(j.value ? new color_BinaryColor(false) : new color_BinaryColor(true));
		}
		_g.push(_g2);
	}
	return image__$Image_Image_$Impl_$._new(_g);
};
tools_ImageTools.erode = function(image1,repeat) {
	if(repeat == null) {
		repeat = 1;
	}
	if(repeat < 0) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("repeat value cant be lower than 0"));
	}
	if(repeat == 0) {
		return image1;
	}
	var width = image1[0].length;
	var height = image1.length;
	var res = [];
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var i = _g++;
		var newLine = [];
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var j = _g2++;
			var localMax = new color_BinaryColor(false);
			var _g3 = i - 1;
			var _g12 = i + 2;
			while(_g3 < _g12) {
				var ii = _g3++;
				var _g4 = j - 1;
				var _g13 = j + 2;
				while(_g4 < _g13) {
					var jj = _g4++;
					if(ii >= 0 && jj >= 0 && ii < height && jj < width && image1[ii][jj].value && !localMax.value) {
						localMax = image1[ii][jj];
					}
				}
			}
			newLine.push(localMax);
		}
		res.push(newLine);
	}
	return tools_ImageTools.erode(image__$Image_Image_$Impl_$._new(res),repeat - 1);
};
tools_ImageTools.downscale = function(image1,squareSize,repeat) {
	if(repeat == null) {
		repeat = 1;
	}
	if(squareSize == null) {
		squareSize = 2;
	}
	if(repeat < 0) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("repeat value cant be less than 0"));
	}
	if(squareSize < 2) {
		throw new js__$Boot_HaxeError(new exceptions_ValueException("squareSize value cant be less than 2"));
	}
	if(repeat == 0) {
		return image1;
	}
	var width = image1[0].length;
	var height = image1.length;
	var res = [];
	var _g = 0;
	var _g1 = ds__$Range_Range_$Impl_$._new(0,height,squareSize);
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		var newLine = [];
		var _g11 = 0;
		var _g2 = ds__$Range_Range_$Impl_$._new(0,width,squareSize);
		while(_g11 < _g2.length) {
			var j = _g2[_g11];
			++_g11;
			var blackCount = 0;
			var _g21 = i;
			var _g3 = i + squareSize;
			while(_g21 < _g3) {
				var ii = _g21++;
				var _g22 = j;
				var _g31 = j + squareSize;
				while(_g22 < _g31) {
					var jj = _g22++;
					if(image1[ii][jj].value) {
						++blackCount;
					}
				}
			}
			newLine.push(blackCount >= Math.pow(squareSize,2) / 2 ? new color_BinaryColor(true) : new color_BinaryColor(false));
		}
		res.push(newLine);
	}
	return tools_ImageTools.downscale(image__$Image_Image_$Impl_$._new(res),squareSize,repeat - 1);
};
var tools_TimeTools = function() { };
tools_TimeTools.__name__ = true;
tools_TimeTools.toMilliseconds = function(time1) {
	switch(time1._hx_index) {
	case 0:
		var _g = time1.value;
		return time1;
	case 1:
		var value = time1.value;
		return time_Time.Milliseconds(Math.round(value * 1000));
	case 2:
		var value1 = time1.value;
		return time_Time.Milliseconds(Math.round(60000 * value1));
	}
};
tools_TimeTools.toSeconds = function(time1) {
	switch(time1._hx_index) {
	case 0:
		var value = time1.value;
		return time_Time.Seconds(value / 1000);
	case 1:
		var _g2 = time1.value;
		return time1;
	case 2:
		var value1 = time1.value;
		return time_Time.Seconds(value1 * 60);
	}
};
tools_TimeTools.toMinutes = function(time1) {
	switch(time1._hx_index) {
	case 0:
		var value = time1.value;
		return time_Time.Minutes(value / 60000);
	case 1:
		var value1 = time1.value;
		return time_Time.Minutes(value1 / 60);
	case 2:
		var _g1 = time1.value;
		return time1;
	}
};
tools_TimeTools.getDifference = function(time1,time2) {
	return js_Boot.__cast(Type.enumParameters(tools_TimeTools.toMilliseconds(time1))[0] - Type.enumParameters(tools_TimeTools.toMilliseconds(time2))[0] , Int);
};
var trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$ = {};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.__name__ = true;
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$._new = function() {
	var this1 = brick.display();
	return this1;
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.addLabel = function(this1,text,pixel) {
	this1.addLabel(text,science_geometry__$Point_Point_$Impl_$.get_x(pixel),science_geometry__$Point_Point_$Impl_$.get_y(pixel));
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.drawArc = function(this1,rect,from,to) {
	this1.drawArc(science_geometry__$Point_Point_$Impl_$.get_x(rect.points[0]),science_geometry__$Point_Point_$Impl_$.get_y(rect.points[0]),rect.length,rect.height,from,to);
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.drawEllipse = function(this1,rect) {
	this1.drawEllipse(science_geometry__$Point_Point_$Impl_$.get_x(rect.points[0]),science_geometry__$Point_Point_$Impl_$.get_y(rect.points[0]),rect.length,rect.height);
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.drawLine = function(this1,line) {
	var p1 = science_geometry__$Point_Point_$Impl_$.round(line.point1);
	var p2 = science_geometry__$Point_Point_$Impl_$.round(line.point2);
	this1.drawLine(science_geometry__$Point_Point_$Impl_$.get_x(p1),science_geometry__$Point_Point_$Impl_$.get_y(p1),science_geometry__$Point_Point_$Impl_$.get_x(p2),science_geometry__$Point_Point_$Impl_$.get_y(p2));
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.drawPixel = function(this1,pixel) {
	this1.drawPoint(science_geometry__$Point_Point_$Impl_$.get_x(pixel),science_geometry__$Point_Point_$Impl_$.get_y(pixel));
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.drawRect = function(this1,rect) {
	this1.drawRect(science_geometry__$Point_Point_$Impl_$.get_x(rect.points[0]),science_geometry__$Point_Point_$Impl_$.get_y(rect.points[0]),rect.length,rect.height);
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.setBackground = function(this1,color) {
	this1.setBackground(color.name);
};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.setPainterColor = function(this1,color) {
	this1.setPainterColor(color.name);
};
var trik_robot_gyroscope__$GyroscopeHigher_GyroscopeHigher_$Impl_$ = {};
trik_robot_gyroscope__$GyroscopeHigher_GyroscopeHigher_$Impl_$.__name__ = true;
trik_robot_gyroscope__$GyroscopeHigher_GyroscopeHigher_$Impl_$._new = function() {
	var this1 = brick.gyroscope();
	return this1;
};
trik_robot_gyroscope__$GyroscopeHigher_GyroscopeHigher_$Impl_$.calibrate = function(this1,duration) {
	var _g = tools_TimeTools.toMilliseconds(duration);
	if(_g._hx_index == 0) {
		var value = _g.value;
		this1.calibrate(value);
	} else {
		return;
	}
};
var trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$ = {};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.__name__ = true;
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.keyToCode = function(this1,key) {
	var res = 0;
	switch(key._hx_index) {
	case 0:
		res = 105;
		break;
	case 1:
		res = 103;
		break;
	case 2:
		res = 108;
		break;
	case 3:
		res = 28;
		break;
	case 4:
		res = 106;
		break;
	case 5:
		res = 116;
		break;
	case 6:
		res = 1;
		break;
	}
	return res;
};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.isPressed = function(this1,key) {
	return this1.isPressed(trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.keyToCode(this1,key));
};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.wasPressed = function(this1,key) {
	return this1.wasPressed(trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.keyToCode(this1,key));
};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$._new = function() {
	var this1 = brick.keys();
	return this1;
};
var trik_Brick = function() { };
trik_Brick.__name__ = true;
trik_Brick.encoder = function(port) {
	return brick.encoder(port);
};
trik_Brick.motor = function(port) {
	return brick.motor(port);
};
trik_Brick.colorSensor = function(port) {
	return brick.colorSensor(port);
};
trik_Brick.playSound = function(filename) {
	brick.playSound(filename);
};
trik_Brick.say = function(phrase) {
	brick.say(phrase);
};
trik_Brick.sensor = function(port) {
	return brick.sensor(port);
};
trik_Brick.stop = function() {
	brick.stop();
};
trik_Brick.objectSensor = function(port) {
	return brick.objectSensor(port);
};
trik_Brick.getRawPhoto = function() {
	return image__$RawImage_RawImage_$Impl_$._new(getPhoto());
};
trik_Brick.getPhoto = function() {
	return image__$RawImage_RawImage_$Impl_$.toImage(trik_Brick.getRawPhoto());
};
var trik_Script = function() { };
trik_Script.__name__ = true;
trik_Script.quit = function() {
	script.quit();
};
trik_Script.random = function(from,to) {
	return script.random(from, to);
};
trik_Script.readAll = function(filename) {
	return script.readAll(filename);
};
trik_Script.removeFile = function(filename) {
	script.removeFile(filename);
};
trik_Script.run = function() {
	script.run();
};
trik_Script.system = function(command) {
	script.system(command);
};
trik_Script.time = function() {
	return time_Time.Milliseconds(script.time());
};
trik_Script.wait = function(duration) {
	var _g = tools_TimeTools.toMilliseconds(duration);
	if(_g._hx_index == 0) {
		var value = _g.value;
		script.wait(value);
	} else {
		return;
	}
};
trik_Script.writeToFile = function(filename,content) {
	return script.writeToFile(filename, content);
};
trik_Script.print = function(obj) {
	print(Std.string(obj));
};
var trik_robot_display_Rectangle = function(pixel,length,height) {
	try {
		this.points = [pixel,image__$Pixel_Pixel_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(pixel) + length,science_geometry__$Point_Point_$Impl_$.get_y(pixel)),image__$Pixel_Pixel_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(pixel) + length,science_geometry__$Point_Point_$Impl_$.get_y(pixel) + height),image__$Pixel_Pixel_$Impl_$._new(science_geometry__$Point_Point_$Impl_$.get_x(pixel),science_geometry__$Point_Point_$Impl_$.get_y(pixel) + height)];
	} catch( err ) {
		var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
		if(((err1) instanceof exceptions_ValueException)) {
			var err2 = err1;
			throw new js__$Boot_HaxeError("rectangle doesnt fit in the screen");
		} else {
			throw err;
		}
	}
	this.length = length;
	this.height = height;
};
trik_robot_display_Rectangle.__name__ = true;
trik_robot_display_Rectangle.prototype = {
	__class__: trik_robot_display_Rectangle
};
var trik_robot_display_exceptions_RectangleSizeException = function(errorMessage) {
	exceptions_BaseException.call(this,errorMessage);
};
trik_robot_display_exceptions_RectangleSizeException.__name__ = true;
trik_robot_display_exceptions_RectangleSizeException.__super__ = exceptions_BaseException;
trik_robot_display_exceptions_RectangleSizeException.prototype = $extend(exceptions_BaseException.prototype,{
	toString: function() {
		return "RectangleSizeException(" + this.errorMessage + ")";
	}
	,__class__: trik_robot_display_exceptions_RectangleSizeException
});
var trik_robot_keys_Key = $hxEnums["trik.robot.keys.Key"] = { __ename__ : true, __constructs__ : ["Left","Up","Down","Enter","Right","Power","Esc"]
	,Left: {_hx_index:0,__enum__:"trik.robot.keys.Key",toString:$estr}
	,Up: {_hx_index:1,__enum__:"trik.robot.keys.Key",toString:$estr}
	,Down: {_hx_index:2,__enum__:"trik.robot.keys.Key",toString:$estr}
	,Enter: {_hx_index:3,__enum__:"trik.robot.keys.Key",toString:$estr}
	,Right: {_hx_index:4,__enum__:"trik.robot.keys.Key",toString:$estr}
	,Power: {_hx_index:5,__enum__:"trik.robot.keys.Key",toString:$estr}
	,Esc: {_hx_index:6,__enum__:"trik.robot.keys.Key",toString:$estr}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
color_LiteralColors.red = new color_LiteralColor(255,0,0,"red");
color_LiteralColors.darkRed = new color_LiteralColor(127,0,0,"darkRed");
color_LiteralColors.green = new color_LiteralColor(0,255,0,"green");
color_LiteralColors.darkGreen = new color_LiteralColor(0,127,0,"darkGreen");
color_LiteralColors.blue = new color_LiteralColor(0,0,255,"blue");
color_LiteralColors.darkBlue = new color_LiteralColor(0,0,127,"darkBlue");
color_LiteralColors.cyan = new color_LiteralColor(0,255,255,"cyan");
color_LiteralColors.darkCyan = new color_LiteralColor(0,127,127,"darkCyan");
color_LiteralColors.magenta = new color_LiteralColor(255,0,255,"magenta");
color_LiteralColors.darkMagenta = new color_LiteralColor(127,0,127,"darkMagenta");
color_LiteralColors.yellow = new color_LiteralColor(255,255,0,"yellow");
color_LiteralColors.darkYellow = new color_LiteralColor(127,127,0,"darkYellow");
color_LiteralColors.grey = new color_LiteralColor(127,127,127,"grey");
color_LiteralColors.darkGrey = new color_LiteralColor(65,65,65,"darkGrey");
color_LiteralColors.lightGrey = new color_LiteralColor(191,191,191,"lightGrey");
color_LiteralColors.black = new color_LiteralColor(0,0,0,"black");
color_LiteralColors.white = new color_LiteralColor(255,255,255,"white");
polygonal_ds_Printf.DEFAULT_PRECISION = 6;
polygonal_ds_Printf.DEFAULT_NUM_EXP_DIGITS = 2;
polygonal_ds_Printf._initialized = false;
polygonal_ds_Printf.PAD_0 = 0;
polygonal_ds_Printf.PAD_SPACE = 20;
tools_GeometryTools.epsilon = 1e-6;
trik_Brick.accelerometer = brick.accelerometer();
trik_Brick.battery = brick.battery();
trik_Brick.display = trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$._new();
trik_Brick.keys = trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$._new();
trik_Brick.led = brick.led();
trik_Brick.gyroscope = trik_robot_gyroscope__$GyroscopeHigher_GyroscopeHigher_$Impl_$._new();
app_main_Main.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
