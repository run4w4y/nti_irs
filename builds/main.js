// Generated by Haxe 3.4.6
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	trik_Trik.script.wait(3000);
	trik_Trik.print(trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.wasPressed(trik_Trik.brick.keys,trik_robot_keys_Key.Left));
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var trik_robot_Brick = function() {
	this.accelerometer = brick.accelerometer();
	this.battery = brick.battery();
	this.display = trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$._new();
	this.keys = trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$._new();
	this.led = brick.led();
	this.gyroscope = brick.gyroscope();
};
trik_robot_Brick.__name__ = true;
trik_robot_Brick.prototype = {
	encoder: function(port) {
		return brick.encoder(port);
	}
	,motor: function(port) {
		return brick.motor(port);
	}
	,colorSensor: function(port) {
		return brick.colorSensor(port);
	}
	,playSound: function(filename) {
		brick.playSound(filename);
	}
	,say: function(phrase) {
		brick.say(phrase);
	}
	,sensor: function(port) {
		return brick.sensor(port);
	}
	,stop: function() {
		brick.stop();
	}
	,objectSensor: function(port) {
		return brick.objectSensor(port);
	}
	,getPhoto: function() {
		return getPhoto();
	}
};
var trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$ = {};
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$.__name__ = true;
trik_robot_display__$DisplayHigher_DisplayHigher_$Impl_$._new = function() {
	var this1 = brick.display();
	return this1;
};
var trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$ = {};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.__name__ = true;
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.keyToCode = function(this1,key) {
	var res = 0;
	switch(key[1]) {
	case 0:
		res = 105;
		break;
	case 1:
		res = 103;
		break;
	case 2:
		res = 108;
		break;
	case 3:
		res = 28;
		break;
	case 4:
		res = 106;
		break;
	case 5:
		res = 116;
		break;
	case 6:
		res = 1;
		break;
	}
	return res;
};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.isPressed = function(this1,key) {
	return this1.isPressed(trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.keyToCode(this1,key));
};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.wasPressed = function(this1,key) {
	return this1.wasPressed(trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$.keyToCode(this1,key));
};
trik_robot_keys__$KeysHigher_KeysHigher_$Impl_$._new = function() {
	var this1 = brick.keys();
	return this1;
};
var trik_robot_Mailbox = function() {
};
trik_robot_Mailbox.__name__ = true;
trik_robot_Mailbox.prototype = {
	connect: function(ip,port) {
		if(port == null) {
			port = -1;
		}
		if(port == -1) {
			mailbox.connect(ip);
		} else {
			mailbox.connect(ip, port);
		}
	}
	,hasMessages: function() {
		return mailbox.hasMessages();
	}
	,myHullNumber: function() {
		return mailbox.myHullNumber();
	}
	,receive: function() {
		return mailbox.receive();
	}
	,send: function(message,robotNumber) {
		if(robotNumber == null) {
			robotNumber = -1;
		}
		if(robotNumber == -1) {
			mailbox.send(message);
		} else {
			mailbox.send(robotNumber, message);
		}
	}
};
var trik_robot_Script = function() {
};
trik_robot_Script.__name__ = true;
trik_robot_Script.prototype = {
	quit: function() {
		script.quit();
	}
	,random: function(from,to) {
		return script.random(from, to);
	}
	,readAll: function(filename) {
		return script.readAll(filename);
	}
	,removeFile: function(filename) {
		script.removeFile(filename);
	}
	,run: function() {
		script.run();
	}
	,system: function(command) {
		script.system(command);
	}
	,time: function() {
		return script.time();
	}
	,wait: function(duration) {
		return script.wait(duration);
	}
	,writeToFile: function(filename,content) {
		return script.writeToFile(filename, content);
	}
};
var trik_robot_Concurrency = function() {
};
trik_robot_Concurrency.__name__ = true;
trik_robot_Concurrency.prototype = {
	joinThread: function(threadId) {
		Threading.joinThread(threadId);
	}
	,killThread: function(threadId) {
		Threading.killThread(threadId);
	}
	,receiveMessage: function(wait) {
		return Threading.receiveMessage(wait);
	}
	,sendMessage: function(threadId,message) {
		Threading.sendMessage(threadId, message);
		return;
	}
	,startThread: function(threadId,functionName) {
		Threading.startThread(threadId, functionName);
		return;
	}
};
var trik_Trik = function() { };
trik_Trik.__name__ = true;
trik_Trik.print = function(text) {
	print(text);
};
var trik_color_Color = { __ename__ : true, __constructs__ : ["Red","DarkRed","Green","DarkGreen","Blue","DarkBlue","Cyan","DarkCyan","Magenta","DarkMagenta","Yellow","DarkYellow","Grey","DarkGrey","LightGrey","Black","White","RGB","RGB24"] };
trik_color_Color.Red = ["Red",0];
trik_color_Color.Red.__enum__ = trik_color_Color;
trik_color_Color.DarkRed = ["DarkRed",1];
trik_color_Color.DarkRed.__enum__ = trik_color_Color;
trik_color_Color.Green = ["Green",2];
trik_color_Color.Green.__enum__ = trik_color_Color;
trik_color_Color.DarkGreen = ["DarkGreen",3];
trik_color_Color.DarkGreen.__enum__ = trik_color_Color;
trik_color_Color.Blue = ["Blue",4];
trik_color_Color.Blue.__enum__ = trik_color_Color;
trik_color_Color.DarkBlue = ["DarkBlue",5];
trik_color_Color.DarkBlue.__enum__ = trik_color_Color;
trik_color_Color.Cyan = ["Cyan",6];
trik_color_Color.Cyan.__enum__ = trik_color_Color;
trik_color_Color.DarkCyan = ["DarkCyan",7];
trik_color_Color.DarkCyan.__enum__ = trik_color_Color;
trik_color_Color.Magenta = ["Magenta",8];
trik_color_Color.Magenta.__enum__ = trik_color_Color;
trik_color_Color.DarkMagenta = ["DarkMagenta",9];
trik_color_Color.DarkMagenta.__enum__ = trik_color_Color;
trik_color_Color.Yellow = ["Yellow",10];
trik_color_Color.Yellow.__enum__ = trik_color_Color;
trik_color_Color.DarkYellow = ["DarkYellow",11];
trik_color_Color.DarkYellow.__enum__ = trik_color_Color;
trik_color_Color.Grey = ["Grey",12];
trik_color_Color.Grey.__enum__ = trik_color_Color;
trik_color_Color.DarkGrey = ["DarkGrey",13];
trik_color_Color.DarkGrey.__enum__ = trik_color_Color;
trik_color_Color.LightGrey = ["LightGrey",14];
trik_color_Color.LightGrey.__enum__ = trik_color_Color;
trik_color_Color.Black = ["Black",15];
trik_color_Color.Black.__enum__ = trik_color_Color;
trik_color_Color.White = ["White",16];
trik_color_Color.White.__enum__ = trik_color_Color;
trik_color_Color.RGB = function(r,g,b) { var $x = ["RGB",17,r,g,b]; $x.__enum__ = trik_color_Color; return $x; };
trik_color_Color.RGB24 = function(value) { var $x = ["RGB24",18,value]; $x.__enum__ = trik_color_Color; return $x; };
var trik_color_ColorTools = function() { };
trik_color_ColorTools.__name__ = true;
trik_color_ColorTools.prototype = {
	colorToNativeText: function(color) {
		var _g = new haxe_ds_EnumValueMap();
		_g.set(trik_color_Color.Red,"red");
		_g.set(trik_color_Color.DarkRed,"darkRed");
		_g.set(trik_color_Color.Green,"green");
		_g.set(trik_color_Color.DarkGreen,"darkGreen");
		_g.set(trik_color_Color.Blue,"blue");
		_g.set(trik_color_Color.DarkBlue,"darkBlue");
		_g.set(trik_color_Color.Cyan,"cyan");
		_g.set(trik_color_Color.DarkCyan,"darkCyan");
		_g.set(trik_color_Color.Magenta,"magenta");
		_g.set(trik_color_Color.DarkMagenta,"darkMagenta");
		_g.set(trik_color_Color.Yellow,"yellow");
		_g.set(trik_color_Color.DarkYellow,"darkYellow");
		_g.set(trik_color_Color.Grey,"grey");
		_g.set(trik_color_Color.DarkGrey,"darkGrey");
		_g.set(trik_color_Color.LightGrey,"lightGrey");
		_g.set(trik_color_Color.Black,"black");
		var colorMatch = _g;
		if(!colorMatch.exists(color)) {
			throw new js__$Boot_HaxeError("no native string for the passed color is available");
		}
		return colorMatch.get(color);
	}
	,rgb24ToRgb: function(rgb24_value) {
		if(rgb24_value[1] == 18) {
			var val = rgb24_value[2];
			return trik_color_Color.RGB((val & 16711680) >> 16,(val & 65280) >> 8,val & 255);
		} else {
			throw new js__$Boot_HaxeError("wrong color format was passed, expected to get RGB24 value");
		}
	}
	,colorToRgb: function(color) {
		var _g = new haxe_ds_EnumValueMap();
		_g.set(trik_color_Color.Red,trik_color_Color.RGB(255,0,0));
		_g.set(trik_color_Color.DarkRed,trik_color_Color.RGB(127,0,0));
		_g.set(trik_color_Color.Green,trik_color_Color.RGB(0,255,0));
		_g.set(trik_color_Color.DarkGreen,trik_color_Color.RGB(0,127,0));
		_g.set(trik_color_Color.Blue,trik_color_Color.RGB(0,0,255));
		_g.set(trik_color_Color.DarkBlue,trik_color_Color.RGB(0,0,127));
		_g.set(trik_color_Color.Cyan,trik_color_Color.RGB(0,255,255));
		_g.set(trik_color_Color.DarkCyan,trik_color_Color.RGB(0,127,127));
		_g.set(trik_color_Color.Magenta,trik_color_Color.RGB(255,0,255));
		_g.set(trik_color_Color.DarkMagenta,trik_color_Color.RGB(127,0,127));
		_g.set(trik_color_Color.Yellow,trik_color_Color.RGB(255,255,0));
		_g.set(trik_color_Color.DarkYellow,trik_color_Color.RGB(127,127,0));
		_g.set(trik_color_Color.Grey,trik_color_Color.RGB(127,127,127));
		_g.set(trik_color_Color.DarkGrey,trik_color_Color.RGB(191,191,191));
		_g.set(trik_color_Color.LightGrey,trik_color_Color.RGB(65,65,65));
		_g.set(trik_color_Color.Black,trik_color_Color.RGB(0,0,0));
		_g.set(trik_color_Color.White,trik_color_Color.RGB(255,255,255));
		var colorMatch = _g;
		if(!colorMatch.exists(color)) {
			throw new js__$Boot_HaxeError("wrong color format was passed to the function");
		}
		return colorMatch.get(color);
	}
};
var trik_robot_keys_Key = { __ename__ : true, __constructs__ : ["Left","Up","Down","Enter","Right","Power","Esc"] };
trik_robot_keys_Key.Left = ["Left",0];
trik_robot_keys_Key.Left.__enum__ = trik_robot_keys_Key;
trik_robot_keys_Key.Up = ["Up",1];
trik_robot_keys_Key.Up.__enum__ = trik_robot_keys_Key;
trik_robot_keys_Key.Down = ["Down",2];
trik_robot_keys_Key.Down.__enum__ = trik_robot_keys_Key;
trik_robot_keys_Key.Enter = ["Enter",3];
trik_robot_keys_Key.Enter.__enum__ = trik_robot_keys_Key;
trik_robot_keys_Key.Right = ["Right",4];
trik_robot_keys_Key.Right.__enum__ = trik_robot_keys_Key;
trik_robot_keys_Key.Power = ["Power",5];
trik_robot_keys_Key.Power.__enum__ = trik_robot_keys_Key;
trik_robot_keys_Key.Esc = ["Esc",6];
trik_robot_keys_Key.Esc.__enum__ = trik_robot_keys_Key;
String.__name__ = true;
Array.__name__ = true;
trik_Trik.brick = new trik_robot_Brick();
trik_Trik.script = new trik_robot_Script();
trik_Trik.mailbox = new trik_robot_Mailbox();
trik_Trik.threading = new trik_robot_Concurrency();
Main.main();
})();
